{"pageProps":{"content":{"html":"        <h1>Reporter Interface</h1>\r\n\r\n<p>Implement the following methods to <a class=\"xref\" href=\"/documentation/402810/guides/extend-testcafe/reporter-plugin#implement-the-reporter\">create a reporter</a>:</p>\r\n<ul>\r\n<li><a href=\"#reporttaskstart\">reportTaskStart</a></li>\r\n<li><a href=\"#reportfixturestart\">reportFixtureStart</a></li>\r\n<li><a href=\"#reporttestdone\">reportTestDone</a></li>\r\n<li><a href=\"#reporttaskdone\">reportTaskDone</a></li>\r\n<li><a href=\"#reportteststart\">reportTestStart</a> <em>(optional)</em></li>\r\n</ul>\r\n<p>You can use the <a href=\"#helper-methods\">helper methods and libraries</a> within the reporter methods to output the required data.</p>\r\n<ul>\r\n<li><a href=\"#output-helpers\">Output Helpers</a></li>\r\n<li><a href=\"#formatting-helpers\">Formatting Helpers</a></li>\r\n<li><a href=\"#coloring-helper\">Coloring Helper</a></li>\r\n<li><a href=\"#datetime-helper\">Date-Time Helper</a></li>\r\n</ul>\r\n<h2 id=\"reporttaskstart__$\"><a class=\"anchor-fix\" href=\"#reporttaskstart\" id=\"reporttaskstart\"></a>reportTaskStart<a class=\"anchor-hash\" href=\"#reporttaskstart\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Fires when a test task starts.</p>\r\n<pre><code class=\"lang-js\">async reportTaskStart (startTime, userAgents, testCount)\r\n</code></pre><table>\r\n<thead>\r\n<tr>\r\n<th>Parameter</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>startTime</code></td>\r\n<td>Date</td>\r\n<td>The date and time when testing started.</td>\r\n</tr>\r\n<tr>\r\n<td><code>userAgents</code></td>\r\n<td>Array of Strings</td>\r\n<td>The list of browsers used for testing. Contains the formatted names and versions of the browsers and operating systems.</td>\r\n</tr>\r\n<tr>\r\n<td><code>testCount</code></td>\r\n<td>Number</td>\r\n<td>The total number of tests to run.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>Example</strong></p>\r\n<pre><code class=\"lang-js\">async reportTaskStart (startTime, userAgents, testCount) {\r\n    this.startTime = startTime;\r\n    this.testCount = testCount;\r\n\r\n    const time = this.moment(startTime).format(&#39;M/D/YYYY h:mm:ss a&#39;);\r\n\r\n    this.write(`Testing started: ${time}`)\r\n        .newline()\r\n        .write(`Running ${testCount} tests in: ${userAgents}`)\r\n        .newline();\r\n}\r\n\r\n//=&gt; Testing started: 8/12/2016 3:00:00 am\r\n//=&gt; Running 6 tests in: Chrome 41.0.2227 / Mac OS X 10.10.1,Firefox 47 / Mac OS X 10.10.1\r\n</code></pre><h2 id=\"reportfixturestart__$\"><a class=\"anchor-fix\" href=\"#reportfixturestart\" id=\"reportfixturestart\"></a>reportFixtureStart<a class=\"anchor-hash\" href=\"#reportfixturestart\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Fires each time a fixture starts.</p>\r\n<pre><code class=\"lang-js\">async reportFixtureStart (name, path, meta)\r\n</code></pre><table>\r\n<thead>\r\n<tr>\r\n<th>Parameter</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>name</code></td>\r\n<td>String</td>\r\n<td>The test fixture name.</td>\r\n</tr>\r\n<tr>\r\n<td><code>path</code></td>\r\n<td>String</td>\r\n<td>The path to a test fixture file.</td>\r\n</tr>\r\n<tr>\r\n<td><code>meta</code></td>\r\n<td>Object</td>\r\n<td>The fixture metadata. See <a class=\"xref\" href=\"/documentation/403436/guides/intermediate-guides/metadata-and-filtering\">Specify Test Metadata</a> for more information.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>Example</strong></p>\r\n<pre><code class=\"lang-js\">async reportFixtureStart (name, path, meta) {\r\n    this.currentFixtureName = name;\r\n    this.currentFixtureMeta = meta;\r\n    this.write(`Starting fixture: ${name} ${meta.fixtureID}`)\r\n        .newline();\r\n}\r\n\r\n//=&gt; Starting fixture: First fixture f-0001\r\n</code></pre><h2 id=\"reportteststart__$\"><a class=\"anchor-fix\" href=\"#reportteststart\" id=\"reportteststart\"></a>reportTestStart<a class=\"anchor-hash\" href=\"#reportteststart\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Fires each time a test starts. This method is <em>optional</em>.</p>\r\n<pre><code class=\"lang-js\">async reportTestStart (name, meta)\r\n</code></pre><table><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td><p><code>name</code></p>\r\n</td><td><p>String</p>\r\n</td><td><p>The test name.</p>\r\n</td></tr><tr><td><p><code>meta</code></p>\r\n</td><td><p>Object</p>\r\n</td><td><p>The test metadata. See <a class=\"xref\" href=\"/documentation/403436/guides/intermediate-guides/metadata-and-filtering\">Specify Testing Metadata</a> for more information.</p>\r\n</td></tr><tr><td><p><code>testStartInfo</code></p>\r\n</td><td><p>Object</p>\r\n</td><td><p>A <a href=\"#teststartinfo-object\">testStartInfo</a> object.</p>\r\n</td></tr></table><p><strong>Example</strong></p>\r\n<pre><code class=\"lang-js\">async reportTestStart (name, meta, testStartInfo) {\r\n    this.write(`Starting test at ${testStartInfo.startTime.toLocaleTimeString()}: ${name} (${meta.severity})`) \r\n        .newline(); \r\n}\r\n\r\n//=&gt; Starting test at 4:00:00 AM: Submit data (minor)\r\n</code></pre><h3 id=\"teststartinfo-object__$\"><a class=\"anchor-fix\" href=\"#teststartinfo-object\" id=\"teststartinfo-object\"></a>testStartInfo Object<a class=\"anchor-hash\" href=\"#teststartinfo-object\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>testStartInfo</code> object contains detailed information about the test start.</p>\r\n<table><tr><th>Property</th><th>Type</th><th>Description</th></tr><tr><td><p><code>testRunIds</code></p>\r\n</td><td><p>Array of Strings</p>\r\n</td><td><p>An array of all test identifiers.</p>\r\n</td></tr><tr><td><p><code>testId</code></p>\r\n</td><td><p>String</p>\r\n</td><td><p>The test’s identifier.</p>\r\n</td></tr><tr><td><p><code>startTime</code></p>\r\n</td><td><p>Date</p>\r\n</td><td><p>The start time of the test.</p>\r\n</td></tr></table><h2 id=\"reporttestdone__$\"><a class=\"anchor-fix\" href=\"#reporttestdone\" id=\"reporttestdone\"></a>reportTestDone<a class=\"anchor-hash\" href=\"#reporttestdone\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Fires each time a test ends.</p>\r\n<pre><code class=\"lang-js\">async reportTestDone (name, testRunInfo, meta)\r\n</code></pre><table>\r\n<thead>\r\n<tr>\r\n<th>Parameter</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>name</code></td>\r\n<td>String</td>\r\n<td>The test name.</td>\r\n</tr>\r\n<tr>\r\n<td><code>testRunInfo</code></td>\r\n<td>Object</td>\r\n<td>The <a href=\"#testruninfo-object\">testRunInfo</a> object.</td>\r\n</tr>\r\n<tr>\r\n<td><code>meta</code></td>\r\n<td>Object</td>\r\n<td>The test metadata. See <a class=\"xref\" href=\"/documentation/403436/guides/intermediate-guides/metadata-and-filtering\">Specify Testing Metadata</a> for more information.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>Example</strong></p>\r\n<pre><code class=\"lang-js\">async reportTestDone (name, testRunInfo, meta) {\r\n    const hasErr      = !!testRunInfo.errs.length;\r\n    const hasWarnings = !!testRunInfo.warnings.length;\r\n    const result      = testRunInfo.skipped ? &#39;skipped&#39; : hasErr ? `failed` : `passed`;\r\n\r\n    name = `${this.currentFixtureName} - ${name}`;\r\n\r\n    let title = `${result} ${name}`;\r\n\r\n    if (testRunInfo.unstable)\r\n        title += &#39; (unstable)&#39;;\r\n\r\n    if (testRunInfo.screenshotPath)\r\n        title += ` (screenshots: ${testRunInfo.screenshotPath})`;\r\n\r\n    if (meta.severity)\r\n        title += ` (${meta.severity})`;\r\n\r\n    if (hasWarnings)\r\n        title += &#39; (with warnings)&#39;;\r\n\r\n    this.write(title)\r\n        .newline();\r\n}\r\n\r\n//=&gt; failed First fixture - First test in first fixture (unstable) (screenshots: /screenshots/1445437598847) (critical)\r\n//=&gt; passed First fixture - Second test in first fixture (screenshots: /screenshots/1445437598847)\r\n//=&gt; failed First fixture - Third test in first fixture\r\n//=&gt; skipped First fixture - Fourth test in first fixture\r\n</code></pre><h3 id=\"testruninfo-object__$\"><a class=\"anchor-fix\" href=\"#testruninfo-object\" id=\"testruninfo-object\"></a>testRunInfo Object<a class=\"anchor-hash\" href=\"#testruninfo-object\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>testRunInfo</code> object provides detailed information about the test run. The object has the following properties:</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>Property</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>errs</code></td>\r\n<td>Array of Objects</td>\r\n<td>An array of errors that occurred during the test run. Use the <a href=\"#formaterror\">formatError</a> helper to convert objects in this array to strings.</td>\r\n</tr>\r\n<tr>\r\n<td><code>warnings</code></td>\r\n<td>Array of Strings</td>\r\n<td>An array of warnings that appeared during the test run.</td>\r\n</tr>\r\n<tr>\r\n<td><code>durationMs</code></td>\r\n<td>Number</td>\r\n<td>The duration of the test (in milliseconds).</td>\r\n</tr>\r\n<tr>\r\n<td><code>unstable</code></td>\r\n<td>Boolean</td>\r\n<td>Specifies if the test is marked as unstable.</td>\r\n</tr>\r\n<tr>\r\n<td><code>screenshotPath</code></td>\r\n<td>String</td>\r\n<td>The path where screenshots are saved.</td>\r\n</tr>\r\n<tr>\r\n<td><code>screenshots</code></td>\r\n<td>Array of Objects</td>\r\n<td>An array of <a href=\"#screenshots-object\">screenshot</a> objects.</td>\r\n</tr>\r\n<tr>\r\n<td><code>quarantine</code></td>\r\n<td>Object</td>\r\n<td>A <a href=\"#quarantine-object\">quarantine</a> object.</td>\r\n</tr>\r\n<tr>\r\n<td><code>skipped</code></td>\r\n<td>Boolean</td>\r\n<td>Specifies if the test was skipped.</td>\r\n</tr>\r\n<tr>\r\n<td><code>reportData</code></td>\r\n<td>Object</td>\r\n<td>A <a href=\"#reportdata-object\">reportData</a> object.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"screenshots-object__$\"><a class=\"anchor-fix\" href=\"#screenshots-object\" id=\"screenshots-object\"></a>screenshots Object<a class=\"anchor-hash\" href=\"#screenshots-object\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>screenshot</code> object provides information about the screenshot captured during the test run. The object has the following properties:</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>Property</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>screenshotPath</code></td>\r\n<td>String</td>\r\n<td>The path where the screenshot was saved.</td>\r\n</tr>\r\n<tr>\r\n<td><code>thumbnailPath</code></td>\r\n<td>String</td>\r\n<td>The path where the screenshot’s thumbnail was saved.</td>\r\n</tr>\r\n<tr>\r\n<td><code>userAgent</code></td>\r\n<td>String</td>\r\n<td>The user agent string of the browser where the screenshot was captured.</td>\r\n</tr>\r\n<tr>\r\n<td><code>quarantineAttempt</code></td>\r\n<td>Number</td>\r\n<td>The <a class=\"xref\" href=\"/documentation/403841/guides/intermediate-guides/quarantine-mode\">quarantine</a> attempt’s number.</td>\r\n</tr>\r\n<tr>\r\n<td><code>takenOnFail</code></td>\r\n<td>Boolean</td>\r\n<td>Specifies if the screenshot was captured when the test failed.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"quarantine-object__$\"><a class=\"anchor-fix\" href=\"#quarantine-object\" id=\"quarantine-object\"></a>quarantine Object<a class=\"anchor-hash\" href=\"#quarantine-object\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>quarantine</code> object stores information about <a class=\"xref\" href=\"/documentation/403841/guides/intermediate-guides/quarantine-mode\">quarantined</a> tests in key-value format.</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>Key</th>\r\n<th>Value</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>The&nbsp;quarantine&nbsp;attempt’s&nbsp;number.</td>\r\n<td>Contains information about the attempt. The <code>passed</code> property is <code>true</code> if the attempt has been successful.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"reportdata-object__$\"><a class=\"anchor-fix\" href=\"#reportdata-object\" id=\"reportdata-object\"></a>reportData Object<a class=\"anchor-hash\" href=\"#reportdata-object\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>reportData</code> object stores custom data that the reporter receives from the <a class=\"xref\" href=\"/documentation/404350/reference/test-api/testcontroller/report\">t.report</a> action.</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>Key</th>\r\n<th>Value</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>Test Run ID (string)</td>\r\n<td>Array of values (any type) from the <a class=\"xref\" href=\"/documentation/404350/reference/test-api/testcontroller/report\">t.report</a> action.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"reporttaskdone__$\"><a class=\"anchor-fix\" href=\"#reporttaskdone\" id=\"reporttaskdone\"></a>reportTaskDone<a class=\"anchor-hash\" href=\"#reporttaskdone\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Fires when the task ends.</p>\r\n<pre><code class=\"lang-js\">async reportTaskDone (endTime, passed, warnings, result)\r\n</code></pre><table>\r\n<thead>\r\n<tr>\r\n<th>Parameter</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>endTime</code></td>\r\n<td>Date</td>\r\n<td>The date and time when testing completed.</td>\r\n</tr>\r\n<tr>\r\n<td><code>passed</code></td>\r\n<td>Number</td>\r\n<td>The number of passed tests.</td>\r\n</tr>\r\n<tr>\r\n<td><code>warnings</code></td>\r\n<td>Array of Strings</td>\r\n<td>An array of warnings that occurred during a task run.</td>\r\n</tr>\r\n<tr>\r\n<td><code>result</code></td>\r\n<td>Object</td>\r\n<td>Contains information about the task results.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>Example</strong></p>\r\n<pre><code class=\"lang-js\">async reportTaskDone (endTime, passed, warnings, result) {\r\n    const time = this.moment(endTime).format(&#39;M/D/YYYY h:mm:ss a&#39;);\r\n    const durationMs  = endTime - this.startTime;\r\n    const durationStr = this.moment.duration(durationMs).format(&#39;h[h] mm[m] ss[s]&#39;);\r\n    const summary = result.failedCount ?\r\n                    `${result.failedCount}/${this.testCount} failed` :\r\n                    `${result.passedCount} passed`;\r\n\r\n    this.write(`Testing finished: ${time}`)\r\n        .newline()\r\n        .write(`Duration: ${durationStr}`)\r\n        .newline()\r\n        .write(summary)\r\n        .newline();\r\n}\r\n\r\n//=&gt; Testing finished: 8/12/2016 3:15:25 am\r\n//=&gt; Duration: 15m 25s\r\n//=&gt; 2/6 failed\r\n</code></pre><h3 id=\"result-object__$\"><a class=\"anchor-fix\" href=\"#result-object\" id=\"result-object\"></a>result Object<a class=\"anchor-hash\" href=\"#result-object\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>result</code> object contains information about the task results. The object has the following properties:</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>Parameter</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>passedCount</code></td>\r\n<td>Number</td>\r\n<td>The number of passed tests.</td>\r\n</tr>\r\n<tr>\r\n<td><code>failedCount</code></td>\r\n<td>Number</td>\r\n<td>The number of failed tests.</td>\r\n</tr>\r\n<tr>\r\n<td><code>skippedCount</code></td>\r\n<td>Number</td>\r\n<td>The number of skipped tests.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"helper-methods__$\"><a class=\"anchor-fix\" href=\"#helper-methods\" id=\"helper-methods\"></a>Helper Methods<a class=\"anchor-hash\" href=\"#helper-methods\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Helpers are methods and libraries used to format report output when <a class=\"xref\" href=\"/documentation/402810/guides/extend-testcafe/reporter-plugin#implement-the-reporter\">implementing a reporter</a>. TestCafe mixes these methods into the reporter.</p>\r\n<p>To access helpers, use <code>this</code>.</p>\r\n<h3 id=\"output-helpers__$\"><a class=\"anchor-fix\" href=\"#output-helpers\" id=\"output-helpers\"></a>Output Helpers<a class=\"anchor-hash\" href=\"#output-helpers\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>All output helper methods are chainable: each method returns <code>this</code> so that the methods can be executed one right after another.\r\nThis allows you to write compact code like this.</p>\r\n<pre><code class=\"lang-js\">this.setIndent(4)\r\n    .write(testname)\r\n    .newline()\r\n    .write(result);\r\n</code></pre><h4 id=\"newline__$\"><a class=\"anchor-fix\" href=\"#newline\" id=\"newline\"></a>newline<a class=\"anchor-hash\" href=\"#newline\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p>Adds a new line to the report.</p>\r\n<pre><code class=\"lang-plaintext\">newline () → this\r\n</code></pre><p><strong>Example</strong></p>\r\n<pre><code class=\"lang-js\">async reportTaskDone (endTime, passed, warnings, result) {\r\n    ...\r\n    const summary = result.failedCount ?\r\n                    `${result.failedCount}/${this.testCount} failed` :\r\n                    `${result.passedCount} passed`;\r\n\r\n    this.newline()\r\n        .write(summary)\r\n        .newline();\r\n}\r\n</code></pre><h4 id=\"write__$\"><a class=\"anchor-fix\" href=\"#write\" id=\"write\"></a>write<a class=\"anchor-hash\" href=\"#write\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p>Writes the specified text to the report.</p>\r\n<pre><code class=\"lang-plaintext\">write (text) → this\r\n</code></pre><table>\r\n<thead>\r\n<tr>\r\n<th>Parameter</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>text</code></td>\r\n<td>String</td>\r\n<td>The text to output in the report.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>Example</strong></p>\r\n<pre><code class=\"lang-js\">async reportTaskDone (endTime, passed, warnings, result) {\r\n    ...\r\n    const summary = result.failedCount ?\r\n                    `${result.failedCount}/${this.testCount} failed` :\r\n                    `${result.passedCount} passed`;\r\n\r\n    this.write(summary)\r\n        .newline();\r\n}\r\n</code></pre><h4 id=\"usewordwrap__$\"><a class=\"anchor-fix\" href=\"#usewordwrap\" id=\"usewordwrap\"></a>useWordWrap<a class=\"anchor-hash\" href=\"#usewordwrap\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p>Toggles word wrapping for subsequent output.</p>\r\n<pre><code class=\"lang-plaintext\">useWordWrap (use) → this\r\n</code></pre><table>\r\n<thead>\r\n<tr>\r\n<th>Parameter</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>use</code></td>\r\n<td>Boolean</td>\r\n<td>Specify <em>true</em> to enable word wrapping.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>Example</strong></p>\r\n<p>The following example demonstrates how to enable word wrapping when the <code>title</code> string is long:</p>\r\n<pre><code class=\"lang-js\">async reportTestDone (name, testRunInfo, meta) {\r\n    ...\r\n    name = `${this.currentFixtureName} - ${name}`;\r\n\r\n    const title = `${result} ${name}`;\r\n\r\n    this.useWordWrap(true)\r\n        .write(title);\r\n}\r\n</code></pre><h4 id=\"setindent__$\"><a class=\"anchor-fix\" href=\"#setindent\" id=\"setindent\"></a>setIndent<a class=\"anchor-hash\" href=\"#setindent\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p>Specifies indentation for subsequent output.</p>\r\n<pre><code class=\"lang-plaintext\">setIndent (val) → this\r\n</code></pre><table>\r\n<thead>\r\n<tr>\r\n<th>Parameter</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>val</code></td>\r\n<td>Integer</td>\r\n<td>Specifies the number of spaces to indent a new line. To disable indentation, set the parameter to 0.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>Example</strong></p>\r\n<p>The following example demonstrates how to indent summary information by four spaces:</p>\r\n<pre><code class=\"lang-js\">async reportTaskDone (endTime, passed, warnings, result) {\r\n    ...\r\n    const summary = result.failedCount ?\r\n                    `${result.failedCount}/${this.testCount} failed` :\r\n                    `${result.passedCount} passed`;\r\n\r\n    this.setIndent(4)\r\n        .write(summary);\r\n}\r\n//=&gt;    2/6 failed\r\n</code></pre><h3 id=\"formatting-helpers__$\"><a class=\"anchor-fix\" href=\"#formatting-helpers\" id=\"formatting-helpers\"></a>Formatting Helpers<a class=\"anchor-hash\" href=\"#formatting-helpers\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<h4 id=\"indentstring__$\"><a class=\"anchor-fix\" href=\"#indentstring\" id=\"indentstring\"></a>indentString<a class=\"anchor-hash\" href=\"#indentstring\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p>Indents each line in a string by a number of spaces.</p>\r\n<pre><code class=\"lang-plaintext\">indentString (str, indentVal) → String\r\n</code></pre><table>\r\n<thead>\r\n<tr>\r\n<th>Parameter</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>str</code></td>\r\n<td>String</td>\r\n<td>The string to indent.</td>\r\n</tr>\r\n<tr>\r\n<td><code>indentVal</code></td>\r\n<td>Number</td>\r\n<td>The number of spaces to indent a new line.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>Example</strong></p>\r\n<p>This example demonstrates how to indent each line in the <code>str</code> string by four spaces.</p>\r\n<pre><code class=\"lang-js\">async reportTaskStart (startTime, userAgents, testCount) {\r\n    let str = `Start running tests\\nBrowsers used for testing: ${userAgents}`;\r\n    str = this.indentString(str, 4);\r\n\r\n    this.write(`${str}`)\r\n}\r\n//=&gt;    Start running tests\r\n//=&gt;    Browsers used for testing: Chrome,Firefox\r\n</code></pre><h4 id=\"wordwrap__$\"><a class=\"anchor-fix\" href=\"#wordwrap\" id=\"wordwrap\"></a>wordWrap<a class=\"anchor-hash\" href=\"#wordwrap\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p>Breaks and wraps a string to a new line if its length exceeds the maximum allowed length.</p>\r\n<pre><code class=\"lang-plaintext\">wordWrap (str, indentVal, width) → String\r\n</code></pre><table>\r\n<thead>\r\n<tr>\r\n<th>Parameter</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>str</code></td>\r\n<td>String</td>\r\n<td>The string you want to break.</td>\r\n</tr>\r\n<tr>\r\n<td><code>indentVal</code></td>\r\n<td>Number</td>\r\n<td>The number of spaces to indent a new line.</td>\r\n</tr>\r\n<tr>\r\n<td><code>width</code></td>\r\n<td>Number</td>\r\n<td>The maximum number of characters each line can contain.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>Example</strong></p>\r\n<p>The following example demonstrates how to break the <code>title</code> string to the next line if the string length is more than 50 symbols.</p>\r\n<pre><code class=\"lang-js\">const LINE_WIDTH = 50;\r\n\r\nasync reportTestDone (name, testRunInfo, meta) {\r\n    const hasErr    = !!testRunInfo.errs.length;\r\n    const result    = hasErr ? `failed` : `passed`;\r\n\r\n    name = `${this.currentFixtureName} - ${name}`;\r\n\r\n    let title = `${result} ${name}`;\r\n\r\n    title = this.wordWrap(title, 2, LINE_WIDTH);\r\n\r\n    this.write(title)\r\n        .newline()\r\n        .newline();\r\n}\r\n//=&gt;  failed Sample fixture - Comparing the input\r\n//=&gt;  value with the specified one\r\n//=&gt;\r\n//=&gt;  passed Sample fixture - Clicking an array of\r\n//=&gt;  labels and checking their states\r\n</code></pre><h4 id=\"escapehtml__$\"><a class=\"anchor-fix\" href=\"#escapehtml\" id=\"escapehtml\"></a>escapeHtml<a class=\"anchor-hash\" href=\"#escapehtml\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p>Encodes a string for use in HTML.</p>\r\n<pre><code class=\"lang-plaintext\">escapeHtml (str) → String\r\n</code></pre><table>\r\n<thead>\r\n<tr>\r\n<th>Parameter</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>str</code></td>\r\n<td>String</td>\r\n<td>The string to be encoded.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>Example</strong></p>\r\n<p>The following example demonstrates how to encode the fixture name <em>Tests for the “Example” page</em> for HTML</p>\r\n<pre><code class=\"lang-js\">async reportFixtureStart (name, path, meta) {\r\n    this.currentFixtureName = this.escapeHtml(name);\r\n    this.write(this.currentFixtureName);\r\n}\r\n//=&gt;Tests for the &amp;quot;Example&amp;quot; page\r\n</code></pre><h4 id=\"formaterror__$\"><a class=\"anchor-fix\" href=\"#formaterror\" id=\"formaterror\"></a>formatError<a class=\"anchor-hash\" href=\"#formaterror\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p>Returns the formatted error message string for the specified error.</p>\r\n<pre><code class=\"lang-plaintext\">formatError (err, prefix = &#39;&#39;) → String\r\n</code></pre><table>\r\n<thead>\r\n<tr>\r\n<th>Parameter</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>err</code></td>\r\n<td>Object</td>\r\n<td>The error object you need to format.</td>\r\n</tr>\r\n<tr>\r\n<td><code>prefix = &#39;&#39;</code></td>\r\n<td>String</td>\r\n<td>The string that is prepended to the error. By default, it is empty.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>Example</strong></p>\r\n<p>The following example demonstrates how to number errors:</p>\r\n<pre><code class=\"lang-js\">async reportTestDone (name, testRunInfo, meta) {\r\n    ...\r\n    const hasErr = !!testRunInfo.errs.length;\r\n\r\n    if (hasErr) {\r\n        errs.forEach((err, idx) =&gt; {\r\n            this.newline()\r\n                .write(this.formatError(err, `${idx + 1}) `));\r\n        });\r\n    }\r\n}\r\n//=&gt; 1) Chrome\r\n//=&gt;    Assertion failed at step &quot;Step1&quot;\r\n//=&gt;    ...\r\n//=&gt; 2) Firefox\r\n//=&gt;    Assertion failed at step &quot;Step1&quot;\r\n//=&gt;    ...\r\n</code></pre><h3 id=\"coloring-helper__$\"><a class=\"anchor-fix\" href=\"#coloring-helper\" id=\"coloring-helper\"></a>Coloring Helper<a class=\"anchor-hash\" href=\"#coloring-helper\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<h4 id=\"chalk__$\"><a class=\"anchor-fix\" href=\"#chalk\" id=\"chalk\"></a>chalk<a class=\"anchor-hash\" href=\"#chalk\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><a href=\"https://github.com/chalk/chalk\" target=\"_blank\">chalk<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> is used for ANSI-coloring of the text.</p>\r\n<pre><code class=\"lang-plaintext\">chalk.&lt;style&gt;[.&lt;style&gt;...](string, [string...]) → this\r\n</code></pre><p><strong>Example</strong></p>\r\n<p>The following example demonstrates how to color test results:</p>\r\n<pre><code class=\"lang-js\">async reportTestDone (name, testRunInfo, meta) {\r\n    const hasErr = !!testRunInfo.errs.length;\r\n    const result = hasErr ? this.chalk.red(`failed`) : this.chalk.green(`passed`);\r\n\r\n    name = `${this.currentFixtureName} - ${name}`;\r\n\r\n    const title = `${result} ${name}`;\r\n\r\n    this.write(title);\r\n}\r\n</code></pre><p>To force disabling coloring in reports, set the reporter’s <code>noColors</code> property in the <code>src/index.js</code> file to <code>false</code>.\r\nFor example, you may need to disable coloring for machine-readable formats (JSON or xUnit) since the colored output is not required.</p>\r\n<pre><code class=\"lang-js\">export default function () {\r\n    return {\r\n        noColors: true,\r\n\r\n        async reportTaskStart (startTime, userAgents, testCount) {\r\n            ...\r\n        },\r\n\r\n        ...\r\n    };\r\n}\r\n</code></pre><h3 id=\"datetime-helper__$\"><a class=\"anchor-fix\" href=\"#datetime-helper\" id=\"datetime-helper\"></a>Date/Time Helper<a class=\"anchor-hash\" href=\"#datetime-helper\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<h4 id=\"moment__$\"><a class=\"anchor-fix\" href=\"#moment\" id=\"moment\"></a>moment<a class=\"anchor-hash\" href=\"#moment\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><a href=\"https://momentjs.com/\" target=\"_blank\">moment<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> is used to deal with dates and time.</p>\r\n<pre><code class=\"lang-plaintext\">moment().format() → this\r\n</code></pre><p><strong>Example</strong></p>\r\n<pre><code class=\"lang-js\">async reportTaskDone (endTime, passed, warnings, result) {\r\n    const durationMs  = endTime - this.startTime;\r\n    const durationStr = this.moment\r\n                            .duration(durationMs)\r\n                            .format(&#39;h[h] mm[m] ss[s]&#39;);\r\n\r\n    this.write(`Duration: ${durationStr}`)\r\n    ...\r\n}\r\n</code></pre>","headers":[{"title":"reportTaskStart","tagName":"h2","id":"reporttaskstart","lvl":2},{"title":"reportFixtureStart","tagName":"h2","id":"reportfixturestart","lvl":2},{"title":"reportTestStart","tagName":"h2","id":"reportteststart","lvl":2},{"title":"reportTestDone","tagName":"h2","id":"reporttestdone","lvl":2},{"title":"reportTaskDone","tagName":"h2","id":"reporttaskdone","lvl":2},{"title":"Helper Methods","tagName":"h2","id":"helper-methods","lvl":2}],"title":"Reporter Interface","schema":null,"author":null,"preview":null,"description":null,"published":null},"topicUid":"402790","headerNav":{"items":[{"name":"TestCafe Studio","id":"TestCafe Studio"},{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started","items":[]},{"name":"API","id":"402632","url":"/documentation/402632/api","items":[]},{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes","items":[]},{"name":"Examples","id":"402637","url":"/documentation/402637/examples"},{"name":"FAQ","id":"403936","url":"/documentation/403936/faq","headerUrl":"/documentation/402636/faq/general-info","items":[]},{"name":"What's New","id":"What's New","url":"/release-notes","href":"/release-notes","items":[]},{"name":"Dashboard Alpha","id":"Dashboard Alpha","items":[]},{"name":"Support","id":"Support","url":"/support","href":"/support"}],"activeItems":[{"name":"API","id":"402632","url":"/documentation/402632/api"},{"name":"Plugin API","id":"402632/Plugin API"},{"name":"Reporter Interface","id":"402790","url":"/documentation/402790/reference/plugin-api/reporter"}]},"sidebarNav":{"root":{"name":"API","id":"402632","url":"/documentation/402632/api"},"items":[{"name":"Command Line Interface","id":"402639","url":"/documentation/402639/reference/command-line-interface"},{"name":"Configuration File","id":"402638","url":"/documentation/402638/reference/configuration-file"},{"name":"Test API","id":"402632/Test API","items":[{"name":"Test Object","id":"403366","url":"/documentation/403366/reference/test-api/test","items":[{"name":".after()","id":"402739","url":"/documentation/402739/reference/test-api/test/after"},{"name":".before()","id":"402738","url":"/documentation/402738/reference/test-api/test/before"},{"name":".clientScripts()","id":"402737","url":"/documentation/402737/reference/test-api/test/clientscripts"},{"name":".disablePageCaching","id":"402736","url":"/documentation/402736/reference/test-api/test/disablepagecaching"},{"name":".httpAuth()","id":"402735","url":"/documentation/402735/reference/test-api/test/httpauth"},{"name":".meta()","id":"402734","url":"/documentation/402734/reference/test-api/test/meta"},{"name":".only","id":"402733","url":"/documentation/402733/reference/test-api/test/only"},{"name":".page()","id":"402732","url":"/documentation/402732/reference/test-api/test/page"},{"name":".requestHooks()","id":"402731","url":"/documentation/402731/reference/test-api/test/requesthooks"},{"name":".skip","id":"402730","url":"/documentation/402730/reference/test-api/test/skip"},{"name":".timeouts()","id":"403062","url":"/documentation/403062/reference/test-api/test/timeouts"},{"name":".skipJsErrors()","id":"404026","url":"/documentation/404026/reference/test-api/test/skipjserrors"}]},{"name":"ClientFunction Object","id":"402671","url":"/documentation/402671/reference/test-api/clientfunction","items":[{"name":"Constructor","id":"402789","url":"/documentation/402789/reference/test-api/clientfunction/constructor"},{"name":".with()","id":"402788","url":"/documentation/402788/reference/test-api/clientfunction/with"}]},{"name":"DOMNodeState Object","id":"402670","url":"/documentation/402670/reference/test-api/domnodestate"},{"name":"RequestHook Class","id":"402669","url":"/documentation/402669/reference/test-api/requesthook","items":[{"name":"Constructor","id":"402773","url":"/documentation/402773/reference/test-api/requesthook/constructor"},{"name":".onRequest()","id":"402772","url":"/documentation/402772/reference/test-api/requesthook/onrequest"},{"name":".onResponse()","id":"402771","url":"/documentation/402771/reference/test-api/requesthook/onresponse"}]},{"name":"Fixture Class","id":"403367","url":"/documentation/403367/reference/test-api/fixture","items":[{"name":".after()","id":"402787","url":"/documentation/402787/reference/test-api/fixture/after"},{"name":".afterEach()","id":"402786","url":"/documentation/402786/reference/test-api/fixture/aftereach"},{"name":".before()","id":"402785","url":"/documentation/402785/reference/test-api/fixture/before"},{"name":".beforeEach()","id":"402784","url":"/documentation/402784/reference/test-api/fixture/beforeeach"},{"name":".clientScripts()","id":"402783","url":"/documentation/402783/reference/test-api/fixture/clientscripts"},{"name":".disablePageCaching","id":"402782","url":"/documentation/402782/reference/test-api/fixture/disablepagecaching"},{"name":".httpAuth()","id":"402781","url":"/documentation/402781/reference/test-api/fixture/httpauth"},{"name":".meta()","id":"402780","url":"/documentation/402780/reference/test-api/fixture/meta"},{"name":".only","id":"402779","url":"/documentation/402779/reference/test-api/fixture/only"},{"name":".page()","id":"402778","url":"/documentation/402778/reference/test-api/fixture/page"},{"name":".requestHooks()","id":"402777","url":"/documentation/402777/reference/test-api/fixture/requesthooks"},{"name":".skip","id":"402776","url":"/documentation/402776/reference/test-api/fixture/skip"},{"name":".skipJsErrors()","id":"404025","url":"/documentation/404025/reference/test-api/fixture/skipjserrors"}]},{"name":"Global Functions","id":"402632/Test API/Global Functions","items":[{"name":"fixture()","id":"402775","url":"/documentation/402775/reference/test-api/global/fixture"},{"name":"test()","id":"402774","url":"/documentation/402774/reference/test-api/global/test"}]},{"name":"RequestLogger Class","id":"402668","url":"/documentation/402668/reference/test-api/requestlogger","items":[{"name":"Constructor","id":"402769","url":"/documentation/402769/reference/test-api/requestlogger/constructor"},{"name":".clear()","id":"402770","url":"/documentation/402770/reference/test-api/requestlogger/clear"},{"name":".contains()","id":"402768","url":"/documentation/402768/reference/test-api/requestlogger/contains"},{"name":".count()","id":"402767","url":"/documentation/402767/reference/test-api/requestlogger/count"},{"name":".requests","id":"402766","url":"/documentation/402766/reference/test-api/requestlogger/requests"}]},{"name":"RequestMock Class","id":"402667","url":"/documentation/402667/reference/test-api/requestmock","items":[{"name":"Constructor","id":"402765","url":"/documentation/402765/reference/test-api/requestmock/constructor"},{"name":".onRequestTo()","id":"402763","url":"/documentation/402763/reference/test-api/requestmock/onrequestto"},{"name":".onRequestTo.respond()","id":"402762","url":"/documentation/402762/reference/test-api/requestmock/respond"}]},{"name":"Selector Object","id":"402666","url":"/documentation/402666/reference/test-api/selector","items":[{"name":"Constructor","id":"402756","url":"/documentation/402756/reference/test-api/selector/constructor"},{"name":".addCustomDOMProperties()","id":"402759","url":"/documentation/402759/reference/test-api/selector/addcustomdomproperties"},{"name":".addCustomMethods()","id":"402758","url":"/documentation/402758/reference/test-api/selector/addcustommethods"},{"name":".child()","id":"402757","url":"/documentation/402757/reference/test-api/selector/child"},{"name":".count","id":"402755","url":"/documentation/402755/reference/test-api/selector/count"},{"name":".exists","id":"402754","url":"/documentation/402754/reference/test-api/selector/exists"},{"name":".filter()","id":"402753","url":"/documentation/402753/reference/test-api/selector/filter"},{"name":".filterHidden()","id":"402752","url":"/documentation/402752/reference/test-api/selector/filterhidden"},{"name":".filterVisible()","id":"402751","url":"/documentation/402751/reference/test-api/selector/filtervisible"},{"name":".find()","id":"402750","url":"/documentation/402750/reference/test-api/selector/find"},{"name":".nextSibling()","id":"402749","url":"/documentation/402749/reference/test-api/selector/nextsibling"},{"name":".nth()","id":"402748","url":"/documentation/402748/reference/test-api/selector/nth"},{"name":".parent()","id":"402747","url":"/documentation/402747/reference/test-api/selector/parent"},{"name":".prevSibling()","id":"402746","url":"/documentation/402746/reference/test-api/selector/prevsibling"},{"name":".shadowRoot()","id":"402745","url":"/documentation/402745/reference/test-api/selector/shadowroot"},{"name":".sibling()","id":"402744","url":"/documentation/402744/reference/test-api/selector/sibling"},{"name":".with()","id":"402743","url":"/documentation/402743/reference/test-api/selector/with"},{"name":".withAttribute()","id":"402742","url":"/documentation/402742/reference/test-api/selector/withattribute"},{"name":".withExactText()","id":"402741","url":"/documentation/402741/reference/test-api/selector/withexacttext"},{"name":".withText()","id":"402740","url":"/documentation/402740/reference/test-api/selector/withtext"}]},{"name":"TestController","id":"402665","url":"/documentation/402665/reference/test-api/testcontroller","items":[{"name":".addRequestHooks()","id":"402713","url":"/documentation/402713/reference/test-api/testcontroller/addrequesthooks"},{"name":".browser","id":"402712","url":"/documentation/402712/reference/test-api/testcontroller/browser"},{"name":".clearUpload()","id":"402711","url":"/documentation/402711/reference/test-api/testcontroller/clearupload"},{"name":".click()","id":"402710","url":"/documentation/402710/reference/test-api/testcontroller/click"},{"name":".closeWindow()","id":"402709","url":"/documentation/402709/reference/test-api/testcontroller/closewindow"},{"name":".ctx","id":"402708","url":"/documentation/402708/reference/test-api/testcontroller/ctx"},{"name":".debug()","id":"402707","url":"/documentation/402707/reference/test-api/testcontroller/debug"},{"name":".deleteCookies()","id":"403874","url":"/documentation/403874/reference/test-api/testcontroller/deletecookies"},{"name":".dispatchEvent()","id":"403091","url":"/documentation/403091/reference/test-api/testcontroller/dispatchevent"},{"name":".doubleClick()","id":"402706","url":"/documentation/402706/reference/test-api/testcontroller/doubleclick"},{"name":".drag()","id":"402705","url":"/documentation/402705/reference/test-api/testcontroller/drag"},{"name":".dragToElement()","id":"402704","url":"/documentation/402704/reference/test-api/testcontroller/dragtoelement"},{"name":".eval()","id":"402703","url":"/documentation/402703/reference/test-api/testcontroller/eval"},{"name":".expect()","id":"402702","url":"/documentation/402702/reference/test-api/testcontroller/expect"},{"name":".expect.contains()","id":"402729","url":"/documentation/402729/reference/test-api/testcontroller/expect/contains"},{"name":".expect.eql()","id":"402728","url":"/documentation/402728/reference/test-api/testcontroller/expect/eql"},{"name":".expect.gt()","id":"402727","url":"/documentation/402727/reference/test-api/testcontroller/expect/gt"},{"name":".expect.gte()","id":"402726","url":"/documentation/402726/reference/test-api/testcontroller/expect/gte"},{"name":".expect.lt()","id":"402725","url":"/documentation/402725/reference/test-api/testcontroller/expect/lt"},{"name":".expect.lte()","id":"402724","url":"/documentation/402724/reference/test-api/testcontroller/expect/lte"},{"name":".expect.match()","id":"402723","url":"/documentation/402723/reference/test-api/testcontroller/expect/match"},{"name":".expect.notContains()","id":"402722","url":"/documentation/402722/reference/test-api/testcontroller/expect/notcontains"},{"name":".expect.notEql()","id":"402721","url":"/documentation/402721/reference/test-api/testcontroller/expect/noteql"},{"name":".expect.notMatch()","id":"402720","url":"/documentation/402720/reference/test-api/testcontroller/expect/notmatch"},{"name":".expect.notOk()","id":"402719","url":"/documentation/402719/reference/test-api/testcontroller/expect/notok"},{"name":".expect.notTypeOf()","id":"402718","url":"/documentation/402718/reference/test-api/testcontroller/expect/nottypeof"},{"name":".expect.notWithin()","id":"402717","url":"/documentation/402717/reference/test-api/testcontroller/expect/notwithin"},{"name":".expect.ok()","id":"402716","url":"/documentation/402716/reference/test-api/testcontroller/expect/ok"},{"name":".expect.typeOf()","id":"402715","url":"/documentation/402715/reference/test-api/testcontroller/expect/typeof"},{"name":".expect.within()","id":"402714","url":"/documentation/402714/reference/test-api/testcontroller/expect/within"},{"name":".fixture","id":"404445","url":"/documentation/404445/reference/test-api/testcontroller/fixture"},{"name":".fixtureCtx","id":"402701","url":"/documentation/402701/reference/test-api/testcontroller/fixturectx"},{"name":".getBrowserConsoleMessages()","id":"402700","url":"/documentation/402700/reference/test-api/testcontroller/getbrowserconsolemessages"},{"name":".getCookies()","id":"403873","url":"/documentation/403873/reference/test-api/testcontroller/getcookies"},{"name":".getCurrentWindow()","id":"402699","url":"/documentation/402699/reference/test-api/testcontroller/getcurrentwindow"},{"name":".getNativeDialogHistory()","id":"402698","url":"/documentation/402698/reference/test-api/testcontroller/getnativedialoghistory"},{"name":".hover()","id":"402697","url":"/documentation/402697/reference/test-api/testcontroller/hover"},{"name":".maximizeWindow()","id":"402696","url":"/documentation/402696/reference/test-api/testcontroller/maximizewindow"},{"name":".navigateTo()","id":"402695","url":"/documentation/402695/reference/test-api/testcontroller/navigateto"},{"name":".openWindow()","id":"402694","url":"/documentation/402694/reference/test-api/testcontroller/openwindow"},{"name":".pressKey()","id":"402693","url":"/documentation/402693/reference/test-api/testcontroller/presskey"},{"name":".removeRequestHooks()","id":"402692","url":"/documentation/402692/reference/test-api/testcontroller/removerequesthooks"},{"name":".request()","id":"403981","url":"/documentation/403981/reference/test-api/testcontroller/request"},{"name":".resizeWindow()","id":"402691","url":"/documentation/402691/reference/test-api/testcontroller/resizewindow"},{"name":".resizeWindowToFitDevice()","id":"402690","url":"/documentation/402690/reference/test-api/testcontroller/resizewindowtofitdevice"},{"name":".rightClick()","id":"402689","url":"/documentation/402689/reference/test-api/testcontroller/rightclick"},{"name":".scroll()","id":"403065","url":"/documentation/403065/reference/test-api/testcontroller/scroll"},{"name":".scrollBy()","id":"403066","url":"/documentation/403066/reference/test-api/testcontroller/scrollby"},{"name":".scrollIntoView()","id":"403067","url":"/documentation/403067/reference/test-api/testcontroller/scrollintoview"},{"name":".selectEditableContent()","id":"402688","url":"/documentation/402688/reference/test-api/testcontroller/selecteditablecontent"},{"name":".selectText()","id":"402687","url":"/documentation/402687/reference/test-api/testcontroller/selecttext"},{"name":".selectTextAreaContent()","id":"402686","url":"/documentation/402686/reference/test-api/testcontroller/selecttextareacontent"},{"name":".setCookies()","id":"403872","url":"/documentation/403872/reference/test-api/testcontroller/setcookies"},{"name":".setFilesToUpload()","id":"402685","url":"/documentation/402685/reference/test-api/testcontroller/setfilestoupload"},{"name":".setNativeDialogHandler()","id":"402684","url":"/documentation/402684/reference/test-api/testcontroller/setnativedialoghandler"},{"name":".setPageLoadTimeout()","id":"402683","url":"/documentation/402683/reference/test-api/testcontroller/setpageloadtimeout"},{"name":".setTestSpeed()","id":"402682","url":"/documentation/402682/reference/test-api/testcontroller/settestspeed"},{"name":".skipJsErrors()","id":"404027","url":"/documentation/404027/reference/test-api/testcontroller/skipjserrors"},{"name":".switchToIframe()","id":"402681","url":"/documentation/402681/reference/test-api/testcontroller/switchtoiframe"},{"name":".switchToMainWindow()","id":"402680","url":"/documentation/402680/reference/test-api/testcontroller/switchtomainwindow"},{"name":".switchToParentWindow()","id":"402679","url":"/documentation/402679/reference/test-api/testcontroller/switchtoparentwindow"},{"name":".switchToPreviousWindow()","id":"402678","url":"/documentation/402678/reference/test-api/testcontroller/switchtopreviouswindow"},{"name":".switchToWindow()","id":"402677","url":"/documentation/402677/reference/test-api/testcontroller/switchtowindow"},{"name":".takeElementScreenshot()","id":"402676","url":"/documentation/402676/reference/test-api/testcontroller/takeelementscreenshot"},{"name":".takeScreenshot()","id":"402675","url":"/documentation/402675/reference/test-api/testcontroller/takescreenshot"},{"name":".test","id":"404444","url":"/documentation/404444/reference/test-api/testcontroller/test"},{"name":".typeText()","id":"402674","url":"/documentation/402674/reference/test-api/testcontroller/typetext"},{"name":".useRole()","id":"402673","url":"/documentation/402673/reference/test-api/testcontroller/userole"},{"name":".wait()","id":"402672","url":"/documentation/402672/reference/test-api/testcontroller/wait"},{"name":".report()","id":"404350","url":"/documentation/404350/reference/test-api/testcontroller/report"},{"name":"Role","id":"402665/Role","items":[{"name":"Constructor","id":"402760","url":"/documentation/402760/reference/test-api/role/constructor"},{"name":".anonymous() Static","id":"402761","url":"/documentation/402761/reference/test-api/role/anonymous"}]}]}]},{"name":"TestCafe API","id":"402632/TestCafe API","items":[{"name":"BrowserConnection Object","id":"402643","url":"/documentation/402643/reference/testcafe-api/browserconnection","items":[{"name":"opened Event","id":"402664","url":"/documentation/402664/reference/testcafe-api/browserconnection/opened"},{"name":".url","id":"402663","url":"/documentation/402663/reference/testcafe-api/browserconnection/url"}]},{"name":"LiveModeRunner Object","id":"402642","url":"/documentation/402642/reference/testcafe-api/livemoderunner"},{"name":"Runner Object","id":"402641","url":"/documentation/402641/reference/testcafe-api/runner","items":[{"name":".browsers()","id":"402661","url":"/documentation/402661/reference/testcafe-api/runner/browsers"},{"name":".clientScripts()","id":"402660","url":"/documentation/402660/reference/testcafe-api/runner/clientscripts"},{"name":".compilerOptions()","id":"402659","url":"/documentation/402659/reference/testcafe-api/runner/compileroptions"},{"name":".concurrency()","id":"402658","url":"/documentation/402658/reference/testcafe-api/runner/concurrency"},{"name":".filter()","id":"402657","url":"/documentation/402657/reference/testcafe-api/runner/filter"},{"name":".reporter()","id":"402656","url":"/documentation/402656/reference/testcafe-api/runner/reporter"},{"name":".run()","id":"402655","url":"/documentation/402655/reference/testcafe-api/runner/run"},{"name":".screenshots()","id":"402654","url":"/documentation/402654/reference/testcafe-api/runner/screenshots"},{"name":".src()","id":"402653","url":"/documentation/402653/reference/testcafe-api/runner/src"},{"name":".startApp()","id":"402652","url":"/documentation/402652/reference/testcafe-api/runner/startapp"},{"name":".stop()","id":"402651","url":"/documentation/402651/reference/testcafe-api/runner/stop"},{"name":".tsConfigPath()","id":"402650","url":"/documentation/402650/reference/testcafe-api/runner/tsconfigpath"},{"name":".useProxy()","id":"402649","url":"/documentation/402649/reference/testcafe-api/runner/useproxy"},{"name":".video()","id":"402648","url":"/documentation/402648/reference/testcafe-api/runner/video"}]},{"name":"TestCafe Object","id":"402640","url":"/documentation/402640/reference/testcafe-api/testcafe","items":[{"name":".close()","id":"402647","url":"/documentation/402647/reference/testcafe-api/testcafe/close"},{"name":".createBrowserConnection()","id":"402646","url":"/documentation/402646/reference/testcafe-api/testcafe/createbrowserconnection"},{"name":".createLiveModeRunner()","id":"402645","url":"/documentation/402645/reference/testcafe-api/testcafe/createlivemoderunner"},{"name":".createRunner()","id":"402644","url":"/documentation/402644/reference/testcafe-api/testcafe/createrunner"}]},{"name":"Global","id":"402632/TestCafe API/Global","items":[{"name":"createTestCafe()","id":"402662","url":"/documentation/402662/reference/testcafe-api/global/createtestcafe"}]}]},{"name":"Plugin API","id":"402632/Plugin API","items":[{"name":"BrowserProvider Interface","id":"402791","url":"/documentation/402791/reference/plugin-api/browserprovider"},{"name":"Reporter Interface","id":"402790","url":"/documentation/402790/reference/plugin-api/reporter"}]},{"name":"Version Logger API","id":"404469","url":"/documentation/404469/reference/version-logger-api"}],"activeItems":[{"name":"API","id":"402632","url":"/documentation/402632/api"},{"name":"Plugin API","id":"402632/Plugin API"},{"name":"Reporter Interface","id":"402790","url":"/documentation/402790/reference/plugin-api/reporter"}],"showLeafs":true},"breadcrumbsNav":[{"name":"API","id":"402632","url":"/documentation/402632/api"},{"name":"Plugin API","id":"402632/Plugin API"},{"name":"Reporter Interface","id":"402790","url":"/documentation/402790/reference/plugin-api/reporter"}],"publishDates":{"teamBlog":[1687305600000,1667260800000,1661904000000,1657584000000,1637107200000,1633564800000,1632268800000,1626220800000,1612828800000,1609113600000,1607644800000,1605657600000,1605571200000,1600905600000,1599091200000,1598400000000,1597968000000,1597795200000,1595980800000,1594684800000,1593475200000,1590364800000,1587340800000],"releaseNotes}},"__N_SSG":true}