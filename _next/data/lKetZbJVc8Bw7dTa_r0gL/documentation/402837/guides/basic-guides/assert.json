{"pageProps":{"content":{"html":"        <h1>Assertions</h1>\r\n\r\n<h2 id=\"article-summary__$\"><a class=\"anchor-fix\" href=\"#article-summary\" id=\"article-summary\"></a>Article Summary<a class=\"anchor-hash\" href=\"#article-summary\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Assertions allow you to compare the <strong>actual</strong> state of your application to your <strong>expectations</strong>. Assertions are necessary to <strong>conclusively</strong> determine <a href=\"#why-use-assertions\">test success</a>.</p>\r\n<p>Assertions begin with the invocation of the <a class=\"xref\" href=\"/documentation/402702/reference/test-api/testcontroller/expect\">t.expect</a> method. The following simple assertion compares variable <em>x</em> to variable <em>y</em> and succeeds if the two are equal:</p>\r\n<pre><code class=\"lang-js\">await t.expect(x).eql(y);\r\n</code></pre><p>The <a href=\"#the-first-operand\">left side of the assertion</a> can contain asynchronous functions that extract information from the page. TestCafe offers <a href=\"#assertion-methods\">a set of assertion methods</a> that compare and evaluate assertion operands. TestCafe employs the <a href=\"#smart-assertion-query-mechanism\">Smart Assertion Query Mechanism</a> to eliminate false negatives.</p>\r\n<h2 id=\"table-of-contents__$\"><a class=\"anchor-fix\" href=\"#table-of-contents\" id=\"table-of-contents\"></a>Table of Contents<a class=\"anchor-hash\" href=\"#table-of-contents\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<ul>\r\n<li><a href=\"#why-use-assertions\">Why use assertions</a><ul>\r\n<li><a href=\"#examples\">Examples</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#assertion-structure\">Assertion structure</a><ul>\r\n<li><a href=\"#the-assertion-declaration\">The assertion declaration</a></li>\r\n<li><a href=\"#the-first-operand\">The first operand</a></li>\r\n<li><a href=\"#the-assertion-method\">The assertion method</a></li>\r\n<li><a href=\"#the-second-operand\">The second operand</a></li>\r\n<li><a href=\"#how-to-chain-assertions\">How to chain assertions</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#use-assertions-to-extract-page-information\">Use assertions to extract page information</a><ul>\r\n<li><a href=\"#common-errors-and-best-practices\">Common Errors and Best Practices</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#assertion-methods\">Assertion methods</a><ul>\r\n<li><a href=\"#strict-equality\">Strict equality</a></li>\r\n<li><a href=\"#value-comparison\">Value comparison</a></li>\r\n<li><a href=\"#superset\">Superset</a></li>\r\n<li><a href=\"#numeric-range-check\">Numeric range check</a></li>\r\n<li><a href=\"#truthiness-check\">Truthiness check</a></li>\r\n<li><a href=\"#type-check\">Type check</a></li>\r\n<li><a href=\"#regular-expression-check\">Regular expression check</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#assertion-options\">Assertion options</a><ul>\r\n<li><a href=\"#custom-error-message\">Custom error message</a></li>\r\n<li><a href=\"#assertion-timeout\">Assertion timeout</a></li>\r\n<li><a href=\"#allow-unawaited-promise\">Allow Unawaited Promise</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#how-assertions-work\">How Assertions Work</a><ul>\r\n<li><a href=\"#smart-assertion-query-mechanism\">Smart Assertion Query Mechanism</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#debug-assertions\">Debug Assertions</a></li>\r\n</ul>\r\n<h2 id=\"why-use-assertions__$\"><a class=\"anchor-fix\" href=\"#why-use-assertions\" id=\"why-use-assertions\"></a>Why use assertions<a class=\"anchor-hash\" href=\"#why-use-assertions\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Tests without an explicit <strong>success condition</strong> are inconclusive.</p>\r\n<p>If one of the following errors occurs, the test automatically fails:</p>\r\n<ol>\r\n<li>TestCafe <strong>cannot reach</strong> the test page URL.</li>\r\n<li>TestCafe <strong>cannot perform a test action</strong> — for example, if the target element does not exist.</li>\r\n<li>Your website <strong>throws a <a class=\"xref\" href=\"/documentation/404038/recipes/debugging/skip-javascript-errors\">JavaScript error</a></strong>.</li>\r\n</ol>\r\n<p>But you still don’t know if test actions have had the desired effect. That’s why you should add <strong>assertions</strong> (custom success conditions) to your test.</p>\r\n<h3 id=\"examples__$\"><a class=\"anchor-fix\" href=\"#examples\" id=\"examples\"></a>Examples<a class=\"anchor-hash\" href=\"#examples\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>If your test includes a log-in routine, you may use assertions to perform the following checks:</p>\r\n<ol>\r\n<li><p>Log-in status check</p>\r\n<p> Confirm that the log-in routine has been successful. Check the page for items that are invisible to unauthenticated users:</p>\r\n<pre><code class=\"lang-js\">await t.expect(Selector(&#39;#account-preferences&#39;).filterVisible().exists).ok();\r\n</code></pre></li>\r\n<li><p>User check</p>\r\n<p> Check that the page displays the correct username.</p>\r\n<pre><code class=\"lang-js\">await t.expect(Selector(&#39;#user-name&#39;).innerText).contains(&#39;Jane Doe&#39;);\r\n</code></pre></li>\r\n<li><p>Cookies check</p>\r\n<p> Confirm that the user <a class=\"xref\" href=\"/documentation/403873/reference/test-api/testcontroller/getcookies\">received the cookies</a> necessary to continue the session:</p>\r\n<pre><code class=\"lang-js\">let cookies = await t.getCookies({ domain: &#39;yourwebsite.com&#39; });\r\nawait t.expect(cookies.length).eql(2);\r\n</code></pre></li>\r\n</ol>\r\n<h2 id=\"assertion-structure__$\"><a class=\"anchor-fix\" href=\"#assertion-structure\" id=\"assertion-structure\"></a>Assertion structure<a class=\"anchor-hash\" href=\"#assertion-structure\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>The following simple assertion compares variable <em>x</em> to variable <em>y</em> and succeeds if the two are equal:</p>\r\n<p><img src=\"/images/assertions/assertion-structure.svg\" alt=\"await t.expect(x).eql(y);\"></p>\r\n<p>This assertion consists of the following parts:</p>\r\n<h3 id=\"the-assertion-declaration__$\"><a class=\"anchor-fix\" href=\"#the-assertion-declaration\" id=\"the-assertion-declaration\"></a>The assertion declaration<a class=\"anchor-hash\" href=\"#the-assertion-declaration\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Assertions start with the invocation of the <code>t.expect</code> method. Assertions are <a href=\"#how-assertions-work\">asynchronous</a> methods, and require the use of the <code>await</code> keyword.</p>\r\n<p>You can declare an assertion in any function that has access to the <a class=\"xref\" href=\"/documentation/402665/reference/test-api/testcontroller\">Test Controller</a>, such as the <a class=\"xref\" href=\"/documentation/403366/reference/test-api/test\">test body</a>, <a class=\"xref\" href=\"/documentation/403435/guides/intermediate-guides/hooks\">test hooks</a>, and <a class=\"xref\" href=\"/documentation/402845/guides/intermediate-guides/authentication\">Role definitions</a>. Manually import the TestController object to declare assertions elsewhere.</p>\r\n<h3 id=\"the-first-operand__$\"><a class=\"anchor-fix\" href=\"#the-first-operand\" id=\"the-first-operand\"></a>The first operand<a class=\"anchor-hash\" href=\"#the-first-operand\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The first operand indicates the <strong>actual</strong> state of the application. It can contain an asynchronous function that <a href=\"#use-assertions-to-extract-page-information\">extracts page information</a>:</p>\r\n<pre><code class=\"lang-js\">await t.expect(Selector(&#39;#article-header&#39;).innerText).contains(&#39;10 Best Vacation Spots&#39;);\r\n</code></pre><p>When you pass <a href=\"#use-assertions-to-extract-page-information\">a compatible function</a> to the assertion, TestCafe engages the <a href=\"#smart-assertion-query-mechanism\">Smart Assertion Query Mechanism</a>. If the function fails the first time, TestCafe executes it again to account for possible client-side changes.</p>\r\n<h3 id=\"the-assertion-method__$\"><a class=\"anchor-fix\" href=\"#the-assertion-method\" id=\"the-assertion-method\"></a>The assertion method<a class=\"anchor-hash\" href=\"#the-assertion-method\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The assertion method determines the nature of the comparison. For example. the <code>eql</code> assertion method succeeds when the two operands are equal. See the <a href=\"#assertion-methods\">assertion methods</a> section for an overview of available assertion methods.</p>\r\n<h3 id=\"the-second-operand__$\"><a class=\"anchor-fix\" href=\"#the-second-operand\" id=\"the-second-operand\"></a>The second operand<a class=\"anchor-hash\" href=\"#the-second-operand\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The second operand indicates the <strong>expected value</strong> of the assertion’s first operand. The second operand of the assertion <strong>cannot</strong> contain a function.</p>\r\n<h3 id=\"how-to-chain-assertions__$\"><a class=\"anchor-fix\" href=\"#how-to-chain-assertions\" id=\"how-to-chain-assertions\"></a>How to chain assertions<a class=\"anchor-hash\" href=\"#how-to-chain-assertions\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>You can <a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions#action-chaining\">chain</a> assertions with other TestController methods:</p>\r\n<pre><code class=\"lang-js\">// TestCafe executes the &#39;click&#39; action after the assertion:\r\nt.expect(x).eql(y).click(&#39;#button&#39;); \r\n</code></pre><p>You can only chain <strong>complete</strong> assertions:</p>\r\n<pre><code class=\"lang-js\">// The test fails to start because the assertion is incomplete:\r\nt.expect(x).click(&#39;#button&#39;); \r\n</code></pre><h2 id=\"use-assertions-to-extract-page-information__$\"><a class=\"anchor-fix\" href=\"#use-assertions-to-extract-page-information\" id=\"use-assertions-to-extract-page-information\"></a>Use assertions to extract page information<a class=\"anchor-hash\" href=\"#use-assertions-to-extract-page-information\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>To extract information from the page, pass an asynchronous function to <a href=\"#the-first-operand\">the first operand</a>.</p>\r\n<p>If the function fails, TestCafe retries it multiple times within <a href=\"#assertion-timeout\">the assertion timeout</a>. See <a href=\"#smart-assertion-query-mechanism\">Smart Assertion Query Mechanism</a> for more information.</p>\r\n<p>TestCafe automatically awaits the following functions:  </p>\r\n<ul>\r\n<li><p><a class=\"xref\" href=\"/documentation/402671/reference/test-api/clientfunction\">Client functions</a></p>\r\n<pre><code class=\"lang-js\">const getLocationPart = ClientFunction(locationPart =&gt; {\r\n    return window.location[locationPart];\r\n});\r\n\r\nawait t.expect(getLocationPart(&#39;host&#39;)).eql(&#39;devexpress.github.io&#39;);\r\n</code></pre></li>\r\n<li><p><a class=\"xref\" href=\"/documentation/402666/reference/test-api/selector\">Selector</a> property invocations</p>\r\n<pre><code class=\"lang-js\">await t.expect(Selector(&#39;#article-header&#39;).innerText).contains(&#39;10 Best Vacation Spots&#39;);\r\n</code></pre></li>\r\n<li><p>Two <a class=\"xref\" href=\"/documentation/402668/reference/test-api/requestlogger\">RequestLogger</a> methods — <a class=\"xref\" href=\"/documentation/402767/reference/test-api/requestlogger/count\">count</a> and <a class=\"xref\" href=\"/documentation/402768/reference/test-api/requestlogger/contains\">contains</a></p>\r\n<pre><code class=\"lang-js\">import { RequestLogger } from &#39;testcafe&#39;;\r\n\r\nconst logger = RequestLogger();\r\n\r\nfixture(&#39;RequestLogger&#39;)\r\n    .page(&#39;https://devexpress.github.io/testcafe/example/&#39;)\r\n    .requestHooks(logger);\r\n\r\ntest(&#39;Check request&#39;, async t =&gt; {\r\n    await t.expect(logger.count()).ok();\r\n    await t.expect(logger.contains(record =&gt; record.response.statusCode === 200)).ok();\r\n});\r\n</code></pre></li>\r\n<li><p><a class=\"xref\" href=\"/documentation/403981/reference/test-api/testcontroller/request\">HTTP requests and responses</a></p>\r\n<pre><code class=\"lang-js\">const responseBody = t.request(&#39;http://localhost:3000/helloworld&#39;).body;\r\nawait t.expect(responseBody).contains(&#39;Hello World&#39;);\r\n</code></pre></li>\r\n</ul>\r\n<h3 id=\"common-errors-and-best-practices__$\"><a class=\"anchor-fix\" href=\"#common-errors-and-best-practices\" id=\"common-errors-and-best-practices\"></a>Common Errors and Best Practices<a class=\"anchor-hash\" href=\"#common-errors-and-best-practices\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<ul>\r\n<li><p>Do not place Selector queries <strong>without properties</strong> into the left-hand side of the assertion:</p>\r\n<pre><code class=\"lang-js\">test(&#39;test&#39;, async t =&gt; {\r\n    await t\r\n    .typeText(&#39;input&#39;, &#39;123&#39;)\r\n    .expect(Selector(&#39;input&#39;)).contains(&#39;123&#39;); // fails\r\n});\r\n</code></pre></li>\r\n<li><p>If you place the<code>await</code> keyword into the left-hand side of the assertion, TestCafe <strong>does not enage</strong> the Smart Assertion Query Mechanism.</p>\r\n<pre><code class=\"lang-js\">test(&#39;test&#39;, async t =&gt; {\r\n    await t\r\n    .typeText(&#39;input&#39;, &#39;123&#39;)\r\n    .expect(await Selector(&#39;input&#39;).value).eql(&#39;123&#39;);\r\n});\r\n</code></pre></li>\r\n<li><p>If you pass the result of Selector evaluation to the assertion, TestCafe <strong>does not enage</strong> the Smart Assertion Query Mechanism.</p>\r\n<pre><code class=\"lang-js\">test(&#39;test&#39;, async t =&gt; {\r\n\r\nconst buttonValue = await Selector(&#39;#btn&#39;).textContent; // The constant stores the return value of the Selector query. \r\n\r\nawait t.expect(buttonValue).contains(&#39;Loading...&#39;); // This assertion compares two static values. if the assertion fails, TestCafe does not retry it, because the result would not change.\r\n\r\nawait t.expect(Selector(&#39;#btn&#39;).textContent).contains(&#39;Loading...&#39;); // This assertion contians a proper Selector query. TestCafe retries the assertion in case of failure.\r\n});\r\n</code></pre></li>\r\n<li><p>Do not place a function that returns a promise in the left hand-side of the assertion.</p>\r\n</li>\r\n</ul>\r\n<h2 id=\"assertion-methods__$\"><a class=\"anchor-fix\" href=\"#assertion-methods\" id=\"assertion-methods\"></a>Assertion methods<a class=\"anchor-hash\" href=\"#assertion-methods\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>TestCafe offers a comprehensive set of assertion methods.</p>\r\n<p>Different assertion methods require different arguments. For example, the <code>within</code> method requires <strong>two</strong> numeric arguments. The <code>ok</code> and <code>notOk</code> methods are Boolean, and do not require an argument. Refer to the documentation of a specific assertion method for more information.</p>\r\n<p>We can divide assertion methods into groups based on their mathematical function:</p>\r\n<ul>\r\n<li><a href=\"#strict-equality\">Strict equality</a><ul>\r\n<li><a href=\"#eql-x--y\">eql (X = Y)</a></li>\r\n<li><a href=\"#noteql-x--y\">notEql (X ≠ Y)</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#value-comparison\">Value comparison</a><ul>\r\n<li><a href=\"#gt-x--y\">gt (X &gt; Y)</a></li>\r\n<li><a href=\"#gte-x--y\">gte (X ≥ Y)</a></li>\r\n<li><a href=\"#lte-x--y\">lte (X ≤ Y)</a></li>\r\n<li><a href=\"#lt-x--y\">lt (X &lt; Y)</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#superset\">Superset</a><ul>\r\n<li><a href=\"#contains-y--x\">contains (Y ∈ X)</a></li>\r\n<li><a href=\"#notcontains-y--x\">notContains (Y ∉ X)</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#numeric-range-check\">Numeric range check</a><ul>\r\n<li><a href=\"#numeric-range-check\">within (X ∈ [Yᵃ, Yᵇ])</a></li>\r\n<li><a href=\"#numeric-range-check\">notWithin (X ∉ [Yᵃ, Yᵇ])</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#truthiness-check\">Truthiness check</a><ul>\r\n<li><a href=\"#ok-x\">ok (⊤X)</a></li>\r\n<li><a href=\"#notok-x\">notOK (⊥X)</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#type-check\">Type check</a><ul>\r\n<li><a href=\"#typeof-x--type-y\">typeOf (X ∈ type Y)</a></li>\r\n<li><a href=\"#nottypeof-x--type-y\">notTypeOf (X ∉ type Y)</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#regular-expression-check\">Regular expression check</a><ul>\r\n<li><a href=\"#match\">match</a></li>\r\n<li><a href=\"#notmatch\">notMatch</a></li>\r\n</ul>\r\n</li>\r\n</ul>\r\n<h3 id=\"strict-equality__$\"><a class=\"anchor-fix\" href=\"#strict-equality\" id=\"strict-equality\"></a>Strict equality<a class=\"anchor-hash\" href=\"#strict-equality\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The following assertion methods perform a strict equality check:</p>\r\n<h4 id=\"eql-x--y__$\"><a class=\"anchor-fix\" href=\"#eql-x--y\" id=\"eql-x--y\"></a>eql (X = Y)<a class=\"anchor-hash\" href=\"#eql-x--y\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402728/reference/test-api/testcontroller/expect/eql\">eql</a></p>\r\n<p><strong>Examples</strong>:</p>\r\n<pre><code class=\"lang-js\">// successful assertions:\r\nawait t.expect(20).eql(20);\r\nawait t.expect(&#39;20&#39;).eql(&#39;20&#39;);\r\nawait t.expect({ username: &#39;steve@example.com&#39; }).eq({ username: &#39;steve@example.com&#39; });\r\n\r\n// failed assertions:\r\nawait t.expect(15).eql(20);\r\nawait t.expect(&#39;20&#39;).eql(&#39;15&#39;);\r\nawait t.expect({ username: &#39;steve@example.com&#39; }).eq({ username: &#39;dave@example.com&#39; });\r\n// invalid assertions:\r\nawait t.expect(&#39;20&#39;).eql(20); // operand data types don&#39;t match\r\n</code></pre><h4 id=\"noteql-x--y__$\"><a class=\"anchor-fix\" href=\"#noteql-x--y\" id=\"noteql-x--y\"></a>notEql (X ≠ Y)<a class=\"anchor-hash\" href=\"#noteql-x--y\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402721/reference/test-api/testcontroller/expect/noteql\">notEql</a></p>\r\n<p><strong>Examples</strong>:</p>\r\n<pre><code class=\"lang-js\">// successful assertions:\r\nawait t.expect(15).notEql(20);\r\nawait t.expect(&#39;20&#39;).notEql(&#39;15&#39;);\r\nawait t.expect({ username: &#39;steve@example.com&#39; })notEql({ username: &#39;dave@example.com&#39; });\r\n\r\n// failed assertions:\r\nawait t.expect(20).notEql(20);\r\nawait t.expect(&#39;20&#39;).notEql(&#39;20&#39;);\r\nawait t.expect({ username: &#39;steve@example.com&#39; })notEql({ username: &#39;steve@example.com&#39; });\r\n\r\n// invalid assertions:\r\nawait t.expect(&#39;20&#39;).notEql(20);  // operand data types don&#39;t match\r\n</code></pre><h3 id=\"value-comparison__$\"><a class=\"anchor-fix\" href=\"#value-comparison\" id=\"value-comparison\"></a>Value comparison<a class=\"anchor-hash\" href=\"#value-comparison\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The following assertion methods compare two numeric values:</p>\r\n<h4 id=\"gt-x--y__$\"><a class=\"anchor-fix\" href=\"#gt-x--y\" id=\"gt-x--y\"></a>gt (X &gt; Y)<a class=\"anchor-hash\" href=\"#gt-x--y\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402727/reference/test-api/testcontroller/expect/gt\">gt</a></p>\r\n<p><strong>Examples</strong>:</p>\r\n<pre><code class=\"lang-js\">const today = new Date(); // current date\r\nconst lovelessReleaseDate = new Date(1991, 10, 4); // November 4th, 1991\r\n\r\n// successful assertions:\r\nawait t.expect(20).gt(15)\r\nawait t.expect(today).gt(lovelessReleaseDate);\r\n\r\n// failed assertions:\r\nawait t.expect(15).gt(15)\r\nawait t.expect(lovelessReleaseDate).gt(today);\r\n\r\n// invalid assertions:\r\nawait t.expect(&#39;16&#39;).gt(15); // invalid data type (string)\r\nawait t.expect(today).gt(15); // operand data types don&#39;t match\r\n</code></pre><h4 id=\"gte-x--y__$\"><a class=\"anchor-fix\" href=\"#gte-x--y\" id=\"gte-x--y\"></a>gte (X ≥ Y)<a class=\"anchor-hash\" href=\"#gte-x--y\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402726/reference/test-api/testcontroller/expect/gte\">gte</a></p>\r\n<p><strong>Examples</strong>:</p>\r\n<pre><code class=\"lang-js\">const today = new Date(); // current date\r\nconst lovelessReleaseDate = new Date(1991, 10, 4); // November 4th, 1991\r\n\r\n// successful assertions:\r\nawait t.expect(20).gte(15);\r\nawait t.expect(15).gte(15);\r\nawait t.expect(today).gte(lovelessReleaseDate);\r\nawait t.expect(today).gte(today);\r\n\r\n// failed assertions:\r\nawait t.expect(14).gte(15);\r\nawait t.expect(lovelessReleaseDate).gte(today);\r\n\r\n// invalid assertions:\r\nawait t.expect(&#39;16&#39;).gte(15); // invalid data type (string)\r\nawait t.expect(today).gte(15); // operand data types don&#39;t match\r\n</code></pre><h4 id=\"lte-x--y__$\"><a class=\"anchor-fix\" href=\"#lte-x--y\" id=\"lte-x--y\"></a>lte (X ≤ Y)<a class=\"anchor-hash\" href=\"#lte-x--y\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402724/reference/test-api/testcontroller/expect/lte\">lte</a></p>\r\n<p><strong>Examples</strong>:</p>\r\n<pre><code class=\"lang-js\">const today = new Date(); // current date\r\nconst lovelessReleaseDate = new Date(1991, 10, 4); // November 4th, 1991\r\n\r\n// successful assertions:\r\nawait t.expect(14).lte(15);\r\nawait t.expect(15).lte(15);\r\nawait t.expect(lovelessReleaseDate).lte(today);\r\nawait t.expect(today).lte(today);\r\n\r\n// failed assertions:\r\nawait t.expect(20).lte(15);\r\nawait t.expect(today).lte(lovelessReleaseDate);\r\n\r\n// invalid assertions:\r\nawait t.expect(&#39;14&#39;).lte(15) // invalid data type (string)\r\nawait t.expect(today).lte(15) // operand data types don&#39;t match\r\n</code></pre><h4 id=\"lt-x--y__$\"><a class=\"anchor-fix\" href=\"#lt-x--y\" id=\"lt-x--y\"></a>lt (X &lt; Y)<a class=\"anchor-hash\" href=\"#lt-x--y\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402725/reference/test-api/testcontroller/expect/lt\">lt</a></p>\r\n<pre><code class=\"lang-js\">const today = new Date(); // current date\r\nconst lovelessReleaseDate = new Date(1991, 10, 4); // November 4th, 1991\r\n\r\n// successful assertions:\r\nawait t.expect(14).lt(15)\r\nawait t.expect(lovelessReleaseDate).lt(today);\r\n\r\n// failed assertions:\r\nawait t.expect(15).lt(15)\r\nawait t.expect(today).lt(lovelessReleaseDate);\r\n\r\n// invalid assertions:\r\nawait t.expect(&#39;14&#39;).lt(15); // invalid data type (string)\r\nawait t.expect(today).lt(15); // operand data types don&#39;t match\r\n</code></pre><h3 id=\"superset__$\"><a class=\"anchor-fix\" href=\"#superset\" id=\"superset\"></a>Superset<a class=\"anchor-hash\" href=\"#superset\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The following assertion methods check whether X includes Y:</p>\r\n<h4 id=\"contains-y--x__$\"><a class=\"anchor-fix\" href=\"#contains-y--x\" id=\"contains-y--x\"></a>contains (Y ∈ X)<a class=\"anchor-hash\" href=\"#contains-y--x\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402729/reference/test-api/testcontroller/expect/contains\">contains</a></p>\r\n<p><strong>Examples</strong>:</p>\r\n<pre><code class=\"lang-js\">// successful assertions:\r\nawait t.expect([&#39;x&#39;,&#39;y&#39;]).contains(&#39;y&#39;);\r\nawait t.expect(&#39;Username: steve@example.com&#39;).contains(&#39;Username&#39;);\r\nawait t.expect({ username: &#39;steve@example.com&#39;, subscriptionPlan: &#39;basic&#39; }).contains({ username: &#39;steve@example.com&#39; });\r\n\r\n// failed assertions:\r\nawait t.expect([&#39;x&#39;,&#39;y&#39;]).contains(&#39;z&#39;);\r\nawait t.expect(&#39;Username: steve@example.com&#39;).contains(&#39;Password&#39;);\r\nawait t.expect({ username: &#39;steve@example.com&#39;, subscriptionPlan: &#39;basic&#39; }).contains({ username: &#39;dave@example.com&#39; });\r\n\r\n// invalid assertions:\r\nawait t.expect({ username: &#39;steve@example.com&#39;, subscriptionPlan: &#39;basic&#39; }).contains(&#39;steve@example.com&#39;); // operand data types don&#39;t match\r\n</code></pre><h4 id=\"notcontains-y--x__$\"><a class=\"anchor-fix\" href=\"#notcontains-y--x\" id=\"notcontains-y--x\"></a>notContains (Y ∉ X)<a class=\"anchor-hash\" href=\"#notcontains-y--x\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402722/reference/test-api/testcontroller/expect/notcontains\">notContains</a></p>\r\n<p><strong>Examples</strong>:  </p>\r\n<pre><code class=\"lang-js\">// successful assertions:\r\nawait t.expect([&#39;x&#39;,&#39;y&#39;]).notContains(&#39;z&#39;);\r\nawait t.expect(&#39;Username: steve@example.com&#39;).notContains(&#39;Password&#39;);\r\nawait t.expect({ username: &#39;steve@example.com&#39;, subscriptionPlan: &#39;basic&#39; }).notContains({ username: &#39;dave@example.com&#39; });\r\n\r\n// failed assertions:\r\nawait t.expect([&#39;x&#39;,&#39;y&#39;]).notContains(&#39;y&#39;);\r\nawait t.expect(&#39;Username: steve@example.com&#39;).notContains(&#39;Username&#39;);\r\nawait t.expect({ username: &#39;steve@example.com&#39;, subscriptionPlan: &#39;basic&#39; }).notContains({ username: &#39;steve@example.com&#39; });\r\n\r\n// invalid assertions:\r\nawait t.expect({ username: &#39;steve@example.com&#39;, subscriptionPlan: &#39;basic&#39; }).notContains(&#39;dave@example.com&#39;); // operand data types don&#39;t match\r\n</code></pre><h3 id=\"numeric-range-check__$\"><a class=\"anchor-fix\" href=\"#numeric-range-check\" id=\"numeric-range-check\"></a>Numeric range check<a class=\"anchor-hash\" href=\"#numeric-range-check\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The following assertion methods check whether the Y range of numbers includes X.</p>\r\n<h4 id=\"within-x--yᵃ-yᵇ__$\"><a class=\"anchor-fix\" href=\"#within-x--yᵃ-yᵇ\" id=\"within-x--yᵃ-yᵇ\"></a>within (X ∈ [Yᵃ, Yᵇ])<a class=\"anchor-hash\" href=\"#within-x--yᵃ-yᵇ\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402714/reference/test-api/testcontroller/expect/within\">within</a></p>\r\n<p><strong>Examples</strong>:</p>\r\n<pre><code class=\"lang-js\">await t.expect(10).within(1, 20); // success\r\nawait t.expect(22).within(1, 20); // failure\r\n\r\n// invalid assertions:\r\nawait t.expect(22).within([20, 100]); // the second operand is an array\r\nawait t.expect(22).within(1); // insufficient number of range definition arguments\r\nawait t.expect(10).within(20, 1); // invalid range definition: 20 is greater than 1\r\n</code></pre><h4 id=\"notwithin-x--yᵃ-yᵇ__$\"><a class=\"anchor-fix\" href=\"#notwithin-x--yᵃ-yᵇ\" id=\"notwithin-x--yᵃ-yᵇ\"></a>notWithin (X ∉ [Yᵃ, Yᵇ])<a class=\"anchor-hash\" href=\"#notwithin-x--yᵃ-yᵇ\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>:<a class=\"xref\" href=\"/documentation/402717/reference/test-api/testcontroller/expect/notwithin\">notWithin</a></p>\r\n<p><strong>Examples</strong>:</p>\r\n<pre><code class=\"lang-js\">await t.expect(22).notWithin(1, 20); // success\r\nawait t.expect(10).notWithin(1, 20); // failure\r\n\r\n// invalid assertions:\r\nawait t.expect(12).notWithin([20, 100]); // the second operand is an array    \r\nawait t.expect(22).notWithin(1); // insufficient number of range definition arguments\r\nawait t.expect(22).notWithin(20, 1); // invalid range definition: 20 is greater than 1\r\n</code></pre><h3 id=\"truthiness-check__$\"><a class=\"anchor-fix\" href=\"#truthiness-check\" id=\"truthiness-check\"></a>Truthiness check<a class=\"anchor-hash\" href=\"#truthiness-check\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The following assertion methods check the Boolean value of X.</p>\r\n<h4 id=\"ok-x__$\"><a class=\"anchor-fix\" href=\"#ok-x\" id=\"ok-x\"></a>ok (⊤(X))<a class=\"anchor-hash\" href=\"#ok-x\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402716/reference/test-api/testcontroller/expect/ok\">ok</a></p>\r\n<pre><code class=\"lang-js\">const inputField = Selector(&#39;#developer-name&#39;);\r\nconst fakeElement = Selector(&#39;#this-element-does-not-exist&#39;);\r\n\r\n// successful assertions:\r\nawait t.expect(inputField.exists).ok();\r\nawait t.expect(&#39;Hello!&#39;).ok();\r\n\r\n// failed assertions:\r\nawait t.expect(fakeElement.exists).ok(); // the element doesn&#39;t exist  \r\nawait t.expect(&#39;&#39;).ok(); // the string is empty\r\nawait t.expect(null).ok(); // null isn&#39;t truthy\r\nawait t.expect(undefined).ok(); // undefined isn&#39;t truthy\r\n</code></pre><h4 id=\"notok-x__$\"><a class=\"anchor-fix\" href=\"#notok-x\" id=\"notok-x\"></a>notOK (⊥(X))<a class=\"anchor-hash\" href=\"#notok-x\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402719/reference/test-api/testcontroller/expect/notok\">notOk</a></p>\r\n<p><strong>Examples</strong>: </p>\r\n<pre><code class=\"lang-js\">const inputField = Selector(&#39;#developer-name&#39;);\r\nconst fakeElement = Selector(&#39;#this-element-does-not-exist&#39;);\r\n\r\n// successful assertions:\r\nawait t.expect(fakeElement.exists).notOk(); // the element doesn&#39;t exist  \r\nawait t.expect(&#39;&#39;).notOk(); // the string is empty\r\nawait t.expect(null).notOk(); // null is falsy\r\nawait t.expect(undefined).notOk(); // undefined is falsy\r\n\r\n// failed assertions:\r\nawait t.expect(inputField.exists).notOk();\r\nawait t.expect(&#39;Hello!&#39;).notOk();\r\n</code></pre><h3 id=\"type-check__$\"><a class=\"anchor-fix\" href=\"#type-check\" id=\"type-check\"></a>Type check<a class=\"anchor-hash\" href=\"#type-check\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The following assertion methods check whether X belongs to data type Y.</p>\r\n<h4 id=\"typeof-x--type-y__$\"><a class=\"anchor-fix\" href=\"#typeof-x--type-y\" id=\"typeof-x--type-y\"></a>typeOf (X ∈ type Y)<a class=\"anchor-hash\" href=\"#typeof-x--type-y\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402715/reference/test-api/testcontroller/expect/typeof\">typeOf</a></p>\r\n<p><strong>Examples</strong>:</p>\r\n<pre><code class=\"lang-js\">await t.expect(12).typeOf(&#39;Number&#39;); // success\r\nawait t.expect(12).typeOf(&#39;Object&#39;); // failure\r\n</code></pre><h4 id=\"nottypeof-x--type-y__$\"><a class=\"anchor-fix\" href=\"#nottypeof-x--type-y\" id=\"nottypeof-x--type-y\"></a>notTypeOf (X ∉ type Y)<a class=\"anchor-hash\" href=\"#nottypeof-x--type-y\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402718/reference/test-api/testcontroller/expect/nottypeof\">notTypeOf</a></p>\r\n<p><strong>Examples</strong>:</p>\r\n<pre><code class=\"lang-js\">await t.expect(12).notTypeOf(&#39;Object&#39;); // success\r\nawait t.expect(12).notTypeOf(&#39;Number&#39;); // failure\r\n</code></pre><h3 id=\"regular-expression-check__$\"><a class=\"anchor-fix\" href=\"#regular-expression-check\" id=\"regular-expression-check\"></a>Regular expression check<a class=\"anchor-hash\" href=\"#regular-expression-check\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The following assertion methods check whether X matches the regular expression Y:</p>\r\n<h4 id=\"match__$\"><a class=\"anchor-fix\" href=\"#match\" id=\"match\"></a>match<a class=\"anchor-hash\" href=\"#match\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402723/reference/test-api/testcontroller/expect/match\">match</a></p>\r\n<p>X matches the regular expression Y.</p>\r\n<p><strong>Examples</strong>:</p>\r\n<pre><code class=\"lang-js\">const emailRegex = new RegExp(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r\n\r\nawait t.expect(&#39;email@email.com&#39;).match(emailRegex); // success\r\nawait t.expect(&#39;email@email.com&#39;).match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/); // success\r\nawait t.expect(&#39;email.com&#39;).match(emailRegex); // failure\r\n</code></pre><h4 id=\"notmatch__$\"><a class=\"anchor-fix\" href=\"#notmatch\" id=\"notmatch\"></a>notMatch<a class=\"anchor-hash\" href=\"#notmatch\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h4>\r\n<p><strong>Method reference</strong>: <a class=\"xref\" href=\"/documentation/402720/reference/test-api/testcontroller/expect/notmatch\">notMatch</a></p>\r\n<p>X does not match the regular expression Y.</p>\r\n<p><strong>Examples</strong>:</p>\r\n<pre><code class=\"lang-js\">const emailRegex = new RegExp(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r\n\r\nawait t.expect(&#39;email.com&#39;).notMatch(emailRegex); // success\r\nawait t.expect(&#39;email.com&#39;).notMatch(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/); // success\r\nawait t.expect(&#39;email@email.com&#39;).notMatch(emailRegex); // failure\r\n</code></pre><h2 id=\"assertion-options__$\"><a class=\"anchor-fix\" href=\"#assertion-options\" id=\"assertion-options\"></a>Assertion options<a class=\"anchor-hash\" href=\"#assertion-options\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<h3 id=\"custom-error-message__$\"><a class=\"anchor-fix\" href=\"#custom-error-message\" id=\"custom-error-message\"></a>Custom error message<a class=\"anchor-hash\" href=\"#custom-error-message\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p><strong>Type</strong>: String</p>\r\n<p>You can define a custom error message for the assertion. Pass the string with the message to the assertion method:</p>\r\n<pre><code class=\"lang-js\">await t.expect({ a: &#39;bar&#39; }).eql({ a: &#39;foo&#39; }, &#39;this assertion will fail&#39;);\r\n</code></pre><p><img src=\"/images/assertions/assertion-failure-custom-message.png\" alt=\"Assertion Failure Custom Message\"></p>\r\n<h3 id=\"assertion-timeout__$\"><a class=\"anchor-fix\" href=\"#assertion-timeout\" id=\"assertion-timeout\"></a>Assertion timeout<a class=\"anchor-hash\" href=\"#assertion-timeout\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p><strong>Type</strong>: Number</p>\r\n<p>If an assertion’s first operand contains a <strong>compatible function</strong>, the assertion is subject to the <strong>Smart Assertion Query Mechanism</strong>.</p>\r\n<p>If such an assertion fails, TestCafe executes it again until it meets either of the following criteria:</p>\r\n<ul>\r\n<li>The assertion succeeds.</li>\r\n<li>The <strong>assertion timeout</strong> elapses.</li>\r\n</ul>\r\n<pre><code class=\"lang-js\">await t.expect(Selector(&#39;h1&#39;).innerText).eql(&#39;text&#39;, &#39;check element text&#39;, { timeout: 20000 });\r\n</code></pre><p>To set the timeout for the entire test run, define the assertion timeout in one of the following ways:</p>\r\n<ul>\r\n<li>Set the <a class=\"xref\" href=\"/documentation/402638/reference/configuration-file#assertiontimeout\">assertionTimeout</a> configuration file option.</li>\r\n<li>Set the <a class=\"xref\" href=\"/documentation/402639/reference/command-line-interface#--assertion-timeout-ms\">assertion-timeout</a> CLI option.</li>\r\n<li>Set the <a class=\"xref\" href=\"/documentation/402655/reference/testcafe-api/runner/run#assertiontimeout\">assertionTimeout</a> Runner API option.</li>\r\n</ul>\r\n<div class=\"NOTE\"><p class=\"alert-title\">Note</p><p>The <code>timeout</code> option applies to built-in TestCafe assertion methods. Use the <a class=\"xref\" href=\"/documentation/402672/reference/test-api/testcontroller/wait\">t.wait()</a> method to specify timeouts for third-party assertion methods (<a href=\"https://nodejs.org/api/assert.html\" target=\"_blank\">assert<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>  or <a href=\"https://www.chaijs.com/\" target=\"_blank\">chai<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>).</p>\r\n</div>\r\n<h3 id=\"allow-unawaited-promise__$\"><a class=\"anchor-fix\" href=\"#allow-unawaited-promise\" id=\"allow-unawaited-promise\"></a>Allow Unawaited Promise<a class=\"anchor-hash\" href=\"#allow-unawaited-promise\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>TestCafe awaits <strong>Promises</strong> from <strong>compatible asynchronous functions</strong>. If your assertion includes a custom function that returns a Promise, the assertion fails.</p>\r\n<p>When you create assertions, avoid the use of custom functions that return a Promise. If you can’t work around this limitation, use the <code>allowUnawaitedPromise</code> option:</p>\r\n<pre><code class=\"lang-js\">await t\r\n        .expect(new Promise(resolve =&gt; setTimeout(resolve, 100)))\r\n        .ok(&#39;received a promise&#39;, { allowUnawaitedPromise: true });\r\n</code></pre><h2 id=\"how-assertions-work__$\"><a class=\"anchor-fix\" href=\"#how-assertions-work\" id=\"how-assertions-work\"></a>How Assertions Work<a class=\"anchor-hash\" href=\"#how-assertions-work\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Functional web tests are fundamentally asynchronous. It takes time for the application to respond to user actions.</p>\r\n<p>The application’s reponse speed depends on factors such as the speed of the network, the speed of the database, and front-end animations. Since the response is not immediate, it is often impossible to execute assertions right after the action ends.</p>\r\n<p>Traditional end-to-end frameworks solve this issue with an extra timeout:</p>\r\n<p><img src=\"/images/assertions/extra-waiting.png\" alt=\"Asynchronous Functional Testing with Extra Waiting\"></p>\r\n<p>TestCafe improves on this approach with its Smart Assertion Query Mechanism.</p>\r\n<h3 id=\"smart-assertion-query-mechanism__$\"><a class=\"anchor-fix\" href=\"#smart-assertion-query-mechanism\" id=\"smart-assertion-query-mechanism\"></a>Smart Assertion Query Mechanism<a class=\"anchor-hash\" href=\"#smart-assertion-query-mechanism\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>If the first operand of an assertion is a <a href=\"#use-assertions-to-extract-page-information\">compatible asynchronous function</a> — for example, a Selector property — TestCafe retries the assertion multiple times within <a href=\"#assertion-timeout\">the assertion timeout</a>.</p>\r\n<p>The <a href=\"#assertion-options\">timeout</a> option sets the timeout value on a per-assertion basis. To set the timeout for the entire test run, pass the timeout value to the <a class=\"xref\" href=\"/documentation/402639/reference/command-line-interface#--assertion-timeout-ms\">assertion-timeout</a> CLI option or the <a class=\"xref\" href=\"/documentation/402655/reference/testcafe-api/runner/run\">runner.run</a> option (Test Runner API).    </p>\r\n<p>The test fails if the assertion doesn’t succeed by the end of the timeout period.</p>\r\n<p><img src=\"/images/assertions/query-mechanism.png\" alt=\"TestCafe Smart Assertion Query Mechanism\"></p>\r\n<p><strong>Example:</strong></p>\r\n<p>Consider the following HTML page:</p>\r\n<pre><code class=\"lang-html\">&lt;html&gt;\r\n&lt;body&gt;\r\n    &lt;div id=&quot;btn&quot; onclick=&quot;window.setTimeout(() =&gt; this.textContent = &#39;Loading...&#39;, 100)&quot;&gt;Click me!&lt;/div&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre><p>When the user clicks the <code>#btn</code> element, the browser initiates a 100ms wait period. When the wait period elapses, the browser changes the button’s content.</p>\r\n<p>A regular assertion would fail because the application does not respond instantly. TestCafe accounts for the possibility of a slow reponse, and the following assertion succeeds:</p>\r\n<pre><code class=\"lang-js\">test(&#39;Button click&#39;, async t =&gt; {\r\n    const btn = Selector(&#39;#btn&#39;);\r\n\r\n    await t\r\n        .click(btn)\r\n        .expect(btn.textContent).contains(&#39;Loading...&#39;);\r\n});\r\n</code></pre><h2 id=\"debug-assertions__$\"><a class=\"anchor-fix\" href=\"#debug-assertions\" id=\"debug-assertions\"></a>Debug Assertions<a class=\"anchor-hash\" href=\"#debug-assertions\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Assertions may fail thanks to a badly written <a class=\"xref\" href=\"/documentation/402829/guides/basic-guides/element-selectors\">Element Selector query</a> or a short <a href=\"#assertion-timeout\">assertion timeout</a>. Read the <a class=\"xref\" href=\"/documentation/402835/guides/basic-guides/debug-tests\">Debug Tests guide</a> for more information.</p>\r\n","headers":[{"title":"Article Summary","tagName":"h2","id":"article-summary","lvl":2},{"title":"Table of Contents","tagName":"h2","id":"table-of-contents","lvl":2},{"title":"Why use assertions","tagName":"h2","id":"why-use-assertions","lvl":2},{"title":"Assertion structure","tagName":"h2","id":"assertion-structure","lvl":2},{"title":"Use assertions to extract page information","tagName":"h2","id":"use-assertions-to-extract-page-information","lvl":2},{"title":"Assertion methods","tagName":"h2","id":"assertion-methods","lvl":2},{"title":"Assertion options","tagName":"h2","id":"assertion-options","lvl":2},{"title":"How Assertions Work","tagName":"h2","id":"how-assertions-work","lvl":2},{"title":"Debug Assertions","tagName":"h2","id":"debug-assertions","lvl":2}],"title":"Assertions","schema":null,"author":null,"preview":null,"description":null,"published":null},"topicUid":"402837","headerNav":{"items":[{"name":"TestCafe Studio","id":"TestCafe Studio"},{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started","items":[]},{"name":"API","id":"402632","url":"/documentation/402632/api","items":[]},{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes","items":[]},{"name":"Examples","id":"402637","url":"/documentation/402637/examples"},{"name":"FAQ","id":"403936","url":"/documentation/403936/faq","headerUrl":"/documentation/402636/faq/general-info","items":[]},{"name":"What's New","id":"What's New","url":"/release-notes","href":"/release-notes","items":[]},{"name":"Dashboard Alpha","id":"Dashboard Alpha","items":[]},{"name":"Support","id":"Support","url":"/support","href":"/support"}],"activeItems":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Basic Guides","id":"402634/Basic Guides"},{"name":"Assertions","id":"402837","url":"/documentation/402837/guides/basic-guides/assertions"}]},"sidebarNav":{"root":{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},"items":[{"name":"Overview","id":"402634/Overview","items":[{"name":"Getting Started","id":"402635","url":"/documentation/402635/guides/overview/getting-started"},{"name":"Why TestCafe?","id":"402631","url":"/documentation/402631/guides/overview/why-testcafe"}]},{"name":"Basic Guides","id":"402634/Basic Guides","items":[{"name":"Install TestCafe","id":"402834","url":"/documentation/402834/guides/basic-guides/install-testcafe"},{"name":"Test Structure","id":"402831","url":"/documentation/402831/guides/basic-guides/test-structure"},{"name":"Element Selectors","id":"402829","url":"/documentation/402829/guides/basic-guides/element-selectors"},{"name":"Test Actions","id":"402833","url":"/documentation/402833/guides/basic-guides/test-actions"},{"name":"Assertions","id":"402837","url":"/documentation/402837/guides/basic-guides/assertions"},{"name":"Client Functions","id":"402832","url":"/documentation/402832/guides/basic-guides/client-functions"},{"name":"Run Tests","id":"402830","url":"/documentation/402830/guides/basic-guides/run-tests"},{"name":"Debug Tests","id":"402835","url":"/documentation/402835/guides/basic-guides/debug-tests"}]},{"name":"Best Practices","id":"402634/Best Practices","items":[{"name":"Best Practices","id":"402836","url":"/documentation/402836/guides/best-practices/best-practices"},{"name":"Speed Up Test Execution","id":"402963","url":"/documentation/402963/guides/best-practices/speed-up-test-execution"},{"name":"Page Model","id":"402826","url":"/documentation/402826/guides/best-practices/page-model"},{"name":"Bootstrap your TestCafe project with create-testcafe","id":"404259","url":"/documentation/404259/guides/best-practices/create-testcafe"}]},{"name":"Intermediate Guides","id":"402634/Intermediate Guides","items":[{"name":"Native Automation FAQ","id":"404237","url":"/documentation/404237/guides/intermediate-guides/native-automation-mode"},{"name":"Browsers","id":"402828","url":"/documentation/402828/guides/intermediate-guides/browsers"},{"name":"Mobile Devices, Cloud Browsers and Emulation","id":"403584","url":"/documentation/403584/guides/intermediate-guides/mobile-devices-cloud-browsers-and-emulation"},{"name":"Visual Selector Debugger","id":"404288","url":"/documentation/404288/guides/intermediate-guides/visual-selector-debugger"},{"name":"Run Tests Concurrently","id":"403626","url":"/documentation/403626/guides/intermediate-guides/run-tests-concurrently"},{"name":"Reporters","id":"402825","url":"/documentation/402825/guides/intermediate-guides/reporters"},{"name":"TypeScript and CoffeeScript","id":"402824","url":"/documentation/402824/guides/intermediate-guides/typescript-and-coffeescript"},{"name":"Authentication and Roles","id":"402845","url":"/documentation/402845/guides/intermediate-guides/authentication"},{"name":"Screenshots and Videos","id":"402840","url":"/documentation/402840/guides/intermediate-guides/screenshots-and-videos"},{"name":"API Testing","id":"403971","url":"/documentation/403971/guides/intermediate-guides/api-testing"},{"name":"Hooks","id":"403435","url":"/documentation/403435/guides/intermediate-guides/hooks"},{"name":"Quarantine Mode","id":"403841","url":"/documentation/403841/guides/intermediate-guides/quarantine-mode"},{"name":"Live Mode","id":"403842","url":"/documentation/403842/guides/intermediate-guides/live-mode"},{"name":"Intercept HTTP Requests","id":"402842","url":"/documentation/402842/guides/intermediate-guides/intercept-http-requests"},{"name":"Metadata and Filtering","id":"403436","url":"/documentation/403436/guides/intermediate-guides/metadata-and-filtering"},{"name":"Multiple Browser Windows","id":"402841","url":"/documentation/402841/guides/intermediate-guides/multiple-browser-windows"}]},{"name":"Advanced Guides","id":"402634/Advanced Guides","items":[{"name":"Advanced Selector Techniques","id":"403655","url":"/documentation/403655/guides/advanced-guides/advanced-selector-techniques"},{"name":"Inject Client Scripts","id":"402843","url":"/documentation/402843/guides/advanced-guides/inject-client-scripts"},{"name":"ESM Module Support","id":"404258","url":"/documentation/404258/guides/advanced-guides/esm-module-support"},{"name":"Create Custom Test Actions","id":"404150","url":"/documentation/404150/guides/advanced-guides/custom-test-actions"},{"name":"Fire DOM Events","id":"403219","url":"/documentation/403219/guides/advanced-guides/fire-dom-events"},{"name":"Execute Shell Commands on Startup","id":"403849","url":"/documentation/403849/guides/advanced-guides/execute-shell-commands-on-startup"},{"name":"Test HTTPS Features and HTTP/2 Websites","id":"402839","url":"/documentation/402839/guides/advanced-guides/test-https-features-and-http2-websites"},{"name":"Modify Reporter Output","id":"404388","url":"/documentation/404388/guides/advanced-guides/modify-reporter-output"},{"name":"Detect the Client Browser and Platform","id":"402844","url":"/documentation/402844/guides/advanced-guides/detect-the-client-browser-and-platform"},{"name":"Use the TestCafe Docker Image","id":"402838","url":"/documentation/402838/guides/advanced-guides/use-testcafe-docker-image"},{"name":"Built-In Wait Mechanisms","id":"402827","url":"/documentation/402827/guides/advanced-guides/built-in-wait-mechanisms"},{"name":"Replay Chrome User Flow Recordings","id":"403998","url":"/documentation/403998/guides/advanced-guides/chrome-replay-support"}]},{"name":"Continuous Integration","id":"402809","url":"/documentation/402809/guides/continuous-integration","items":[{"name":"Integrate TestCafe with AppVeyor","id":"402823","url":"/documentation/402823/guides/continuous-integration/appveyor"},{"name":"Integrate TestCafe with Azure DevOps","id":"402822","url":"/documentation/402822/guides/continuous-integration/azure-devops"},{"name":"Run Tests in Bitbucket Pipelines","id":"402821","url":"/documentation/402821/guides/continuous-integration/bitbucket-pipelines"},{"name":"Integrate TestCafe With CircleCI","id":"402819","url":"/documentation/402819/guides/continuous-integration/circleci"},{"name":"Run Tests on LambdaTest with CircleCI","id":"402820","url":"/documentation/402820/guides/continuous-integration/circleci-and-lambdatest"},{"name":"Integrate TestCafe with GitHub Actions","id":"402817","url":"/documentation/402817/guides/continuous-integration/github-actions"},{"name":"Run Tests on BrowserStack with GitHub Actions","id":"402818","url":"/documentation/402818/guides/continuous-integration/github-actions-and-browserstack"},{"name":"Integrate TestCafe with GitLab","id":"402816","url":"/documentation/402816/guides/continuous-integration/gitlab"},{"name":"Integrate TestCafe with Jenkins","id":"402815","url":"/documentation/402815/guides/continuous-integration/jenkins"},{"name":"Integrate TestCafe with TeamCity","id":"402847","url":"/documentation/402847/guides/continuous-integration/teamcity"},{"name":"Run Tests in Travis CI","id":"402813","url":"/documentation/402813/guides/continuous-integration/travis"},{"name":"Run Tests on Sauce Labs with Travis CI","id":"402814","url":"/documentation/402814/guides/continuous-integration/travis-and-sauce-labs"}]},{"name":"Extend TestCafe","id":"402634/Extend TestCafe","items":[{"name":"Install Plugins","id":"402811","url":"/documentation/402811/guides/extend-testcafe/install-plugins"},{"name":"Reporter Plugin","id":"402810","url":"/documentation/402810/guides/extend-testcafe/reporter-plugin"},{"name":"Browser Provider Plugin","id":"402812","url":"/documentation/402812/guides/extend-testcafe/browser-provider-plugin"}]}],"activeItems":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Basic Guides","id":"402634/Basic Guides"},{"name":"Assertions","id":"402837","url":"/documentation/402837/guides/basic-guides/assertions"}],"showLeafs":true},"breadcrumbsNav":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Basic Guides","id":"402634/Basic Guides"},{"name":"Assertions","id":"402837","url":"/documentation/402837/guides/basic-guides/assertions"}],"publishDates":{"teamBlog":[1687305600000,1667260800000,1661904000000,1657584000000,1637107200000,1633564800000,1632268800000,1626220800000,1612828800000,1609113600000,1607644800000,1605657600000,1605571200000,1600905600000,1599091200000,1598400000000,1597968000000,1597795200000,1595980800000,1594684800000,1593475200000,1590364800000,1587340800000],"releaseNotes},"redirectUrl":"/documentation/402837/guides/basic-guides/assertions"},"__N_SSG":true}