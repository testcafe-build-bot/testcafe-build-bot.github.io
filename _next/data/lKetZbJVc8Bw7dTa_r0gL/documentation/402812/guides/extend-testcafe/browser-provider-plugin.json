{"pageProps":{"content":{"html":"        <h1>Browser Provider Plugin</h1>\r\n\r\n<p>TestCafe supports testing in a number of popular browsers (see <a class=\"xref\" href=\"/documentation/402828/guides/intermediate-guides/browsers#browser-support\">Browser Support</a>).\r\nIf you need to use a different browser (for example, a browser from a cloud service), you can create a <strong>custom browser provider plugin</strong>.\r\nThe provider should expose methods for performing common actions on the browser windows during testing: opening and closing it, taking screenshot, etc.</p>\r\n<p>This topic contains the following sections.</p>\r\n<ul>\r\n<li><a href=\"#generate-browser-provider-project\">Generate Browser Provider Project</a></li>\r\n<li><a href=\"#implement-the-browser-provider\">Implement the Browser Provider</a></li>\r\n<li><a href=\"#build-the-provider\">Build the Provider</a></li>\r\n<li><a href=\"#use-the-provider-development-version\">Use the Provider Development Version</a></li>\r\n<li><a href=\"#publish-the-provider-to-npm\">Publish the Provider to npm</a></li>\r\n<li><a href=\"#specify-a-browser-for-a-test-task\">Specify a Browser for a Test Task</a></li>\r\n</ul>\r\n<div class=\"NOTE\"><p class=\"alert-title\">Note</p><p>To run tests on <a href=\"https://saucelabs.com\" target=\"_blank\">Sauce Labs<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> or in custom <a href=\"https://github.com/segment-boneyard/nightmare\" target=\"_blank\">headless<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> browsers, use one of the following plugins: <a href=\"https://github.com/DevExpress/testcafe-browser-provider-saucelabs/\" target=\"_blank\">testcafe-browser-provider-saucelabs<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> or <a href=\"https://github.com/ryx/testcafe-browser-provider-nightmare\" target=\"_blank\">testcafe-browser-provider-nightmare<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>.</p>\r\n</div>\r\n<h2 id=\"generate-browser-provider-project__$\"><a class=\"anchor-fix\" href=\"#generate-browser-provider-project\" id=\"generate-browser-provider-project\"></a>Generate Browser Provider Project<a class=\"anchor-hash\" href=\"#generate-browser-provider-project\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>To create a browser provider project, use the <a href=\"https://github.com/DevExpress/generator-testcafe-browser-provider\" target=\"_blank\">TestCafe browser provider generator<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>.\r\nThe generator will scaffold out the plugin, so that you only need to write a few lines of code.</p>\r\n<p>First, install <a href=\"https://yeoman.io/\" target=\"_blank\">Yeoman<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> and <code>generator-testcafe-browser-provider</code> using <a href=\"https://www.npmjs.com/\" target=\"_blank\">npm<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>.</p>\r\n<pre><code class=\"lang-bash\">npm install -g yo\r\nnpm install -g generator-testcafe-browser-provider\r\n</code></pre><p>Create a new directory where the generator should place your scaffolded project files and go into it.</p>\r\n<pre><code class=\"lang-bash\">mkdir my-provider\r\ncd my-provider\r\n</code></pre><div class=\"NOTE\"><p class=\"alert-title\">Note</p><p>It is recommended that you name the directory as you would name the browser provider project. When you run the generator, it will automatically suggest the browser provider name that matches the browser provider directory name.</p>\r\n<p>The generator will also automatically create the provider package name that consists of two parts - the <code>testcafe-browser-provider-</code> prefix and the name of the provider itself; for example, <code>testcafe-browser-provider-my-provider</code>.</p>\r\n</div>\r\n<div class=\"IMPORTANT\"><p class=\"alert-title\">Important</p><p>If you name the provider package manually, its name must start with the <code>testcafe-browser-provider-</code> prefix. Otherwise, TestCafe will be unable to recognize the plugin.</p>\r\n</div>\r\n<p>Then, run the browser provider generator to create a new project.</p>\r\n<pre><code class=\"lang-bash\">yo testcafe-browser-provider\r\n</code></pre><p>The generator will ask you a few questions about the browser provider. Then, Yeoman will automatically scaffold out the provider, install the required dependencies, and pull in several useful Gulp tasks for your workflow.</p>\r\n<h2 id=\"implement-the-browser-provider__$\"><a class=\"anchor-fix\" href=\"#implement-the-browser-provider\" id=\"implement-the-browser-provider\"></a>Implement the Browser Provider<a class=\"anchor-hash\" href=\"#implement-the-browser-provider\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Once the browser provider has been scaffolded out, go to the provider directory and open the <code>src/index.js</code> file.</p>\r\n<p>There are several required and optional <a class=\"xref\" href=\"/documentation/402791/reference/plugin-api/browserprovider\">provider methods</a> you can implement.</p>\r\n<pre><code class=\"lang-js\">// Required methods\r\nasync openBrowser (/* id, pageUrl, browserName */) {\r\n    throw new Error(&#39;Not implemented!&#39;);\r\n},\r\n\r\nasync closeBrowser (/* id */) {\r\n    throw new Error(&#39;Not implemented!&#39;);\r\n},\r\n\r\n// Optional initialization and cleanup methods\r\nasync init () {\r\n    return;\r\n},\r\n\r\nasync dispose () {\r\n    return;\r\n},\r\n\r\n// Optional methods for multi-browser support\r\nasync getBrowserList () {\r\n    throw new Error(&#39;Not implemented!&#39;);\r\n},\r\n\r\nasync isValidBrowserName (/* browserName */) {\r\n    return true;\r\n},\r\n\r\n// Optional extra methods\r\nasync resizeWindow (/* id, width, height, currentWidth, currentHeight */) {\r\n    this.reportWarning(&#39;The window resize functionality is not supported by the &quot;my-provider&quot; browser provider.&#39;);\r\n},\r\n\r\nasync canResizeWindowToDimensions (/* browserId, width, height */) {\r\n    return true;\r\n}\r\n\r\nasync takeScreenshot (/* id, screenshotPath, pageWidth, pageHeight */) {\r\n    this.reportWarning(&#39;The screenshot functionality is not supported by the &quot;my-provider&quot; browser provider.&#39;);\r\n}\r\n\r\nasync maximizeWindow (/*browserId*/) {\r\n    this.reportWarning(&#39;The window maximization functionality is not supported by the &quot;my-provider&quot; browser provider.&#39;);\r\n}\r\n</code></pre><p>To implement these methods, you can use the <a href=\"https://github.com/DevExpress/testcafe-browser-tools\" target=\"_blank\">testcafe-browser-tools<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> library that contains methods for performing platform-dependent actions on browser windows.</p>\r\n<h3 id=\"example__$\"><a class=\"anchor-fix\" href=\"#example\" id=\"example\"></a>Example<a class=\"anchor-hash\" href=\"#example\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The following example code demonstrates how you can implement the simple browser provider for portable browsers.</p>\r\n<pre><code class=\"lang-js\">import path from &#39;path&#39;;\r\nimport browserTools from &#39;testcafe-browser-tools&#39;;\r\n\r\nfunction getScreenSize () {\r\n    return { width: screen.availWidth, height: screen.availHeight };\r\n}\r\n\r\nexport default {\r\n    isMultiBrowser: true,\r\n    screenSizes: {},\r\n\r\n    async openBrowser (id, pageUrl, browserName) {\r\n        var browserInfo = {};\r\n\r\n        switch (browserName) {\r\n            case &#39;firefox&#39;:\r\n                browserInfo.path = path.join(process.env.PORTABLE_BROWSERS_PATH, &#39;FirefoxPortable/FirefoxPortable.exe&#39;);\r\n                browserInfo.cmd  = &#39;-new-window&#39;;\r\n                break;\r\n            case &#39;chrome&#39;:\r\n                browserInfo.path = path.join(process.env.PORTABLE_BROWSERS_PATH, &#39;GoogleChromePortable/GoogleChromePortable.exe&#39;);\r\n                browserInfo.cmd  = &#39;--new-window&#39;;\r\n                break;\r\n            default:\r\n                throw new Error(&#39;Unsupported browser!&#39;);\r\n        }\r\n\r\n        await browserTools.open(browserInfo, pageUrl);\r\n\r\n        await this.waitForConnectionReady(id);\r\n\r\n        this.screenSizes[id] = await this.runInitScript(id, getScreenSize.toString());\r\n    },\r\n\r\n    async closeBrowser (id) {\r\n        await browserTools.close(id);\r\n    },\r\n\r\n    async getBrowserList () {\r\n        return [&#39;firefox&#39;, &#39;chrome&#39;];\r\n    },\r\n\r\n    async isValidBrowserName (browserName) {\r\n        var browserList = await this.getBrowserList();\r\n\r\n        return browserList.indexOf(browserName) &gt; -1;\r\n    },\r\n\r\n    async resizeWindow (id, width, height, currentWidth, currentHeight) {\r\n        await browserTools.resize(id, currentWidth, currentHeight, width, height);\r\n    },\r\n\r\n    async canResizeWindowToDimensions (id, width, height) {\r\n        var { width: screenWidth, height: screenHeight } = this.screenSizes[id];\r\n\r\n        return width &lt;= screenWidth &amp;&amp; height &lt;= screenHeight;\r\n    }\r\n\r\n    async maximizeWindow (id) {\r\n        await browserTools.maximize(id);\r\n    },\r\n\r\n    async takeScreenshot (id, screenshotPath) {\r\n        await browserTools.screenshot(id, screenshotPath);\r\n    },\r\n};\r\n</code></pre><div class=\"TIP\"><p class=\"alert-title\">Tip</p><p>To learn how to implement provider methods, you can also explore the existing browser provider plugins, for example, <a href=\"https://github.com/DevExpress/testcafe-browser-provider-saucelabs/\" target=\"_blank\">testcafe-browser-provider-saucelabs<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> or <a href=\"https://github.com/ryx/testcafe-browser-provider-nightmare\" target=\"_blank\">testcafe-browser-provider-nightmare<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>.</p>\r\n</div>\r\n<h2 id=\"build-the-provider__$\"><a class=\"anchor-fix\" href=\"#build-the-provider\" id=\"build-the-provider\"></a>Build the Provider<a class=\"anchor-hash\" href=\"#build-the-provider\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>You can build a browser provider project by using the <code>build</code> Gulp task.</p>\r\n<pre><code class=\"lang-bash\">gulp build\r\n</code></pre><h2 id=\"use-the-provider-development-version__$\"><a class=\"anchor-fix\" href=\"#use-the-provider-development-version\" id=\"use-the-provider-development-version\"></a>Use the Provider Development Version<a class=\"anchor-hash\" href=\"#use-the-provider-development-version\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>If you are still developing the browser provider, but need to test it within TestCafe, there is no need to publish the browser provider package to npm.\r\nYou can link the browser provider to TestCafe by using the <a href=\"https://docs.npmjs.com/cli/v7/commands/npm-link/\" target=\"_blank\">npm link<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> command.\r\nThis allows you to work on the browser provider project and test it iteratively without having to re-publish everytime you make a change.</p>\r\n<p>To link the browser provider package, navigate to the provider directory and run <code>npm link</code>:</p>\r\n<pre><code class=\"lang-bash\">cd my-provider\r\nnpm link\r\n</code></pre><p>After that, TestCafe will use the provider version you are currently developing.</p>\r\n<p>For information on how to specify a browser in tests, see <a href=\"#specify-a-browser-for-a-test-task\">Specify a Browser for a Test Task</a>.</p>\r\n<h2 id=\"publish-the-provider-to-npm__$\"><a class=\"anchor-fix\" href=\"#publish-the-provider-to-npm\" id=\"publish-the-provider-to-npm\"></a>Publish the Provider to npm<a class=\"anchor-hash\" href=\"#publish-the-provider-to-npm\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>When you finish developing the provider, you can publish it to npm by running the <code>publish-please</code> npm script.\r\nThis script builds the package, tests the provider and then uses <a href=\"https://github.com/inikulin/publish-please\" target=\"_blank\">publish-please<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> to publish it to npm.\r\nThat is why using the <code>publish-please</code> script instead of <code>npm publish</code> is what is recommended.</p>\r\n<pre><code class=\"lang-bash\">npm run publish-please\r\n</code></pre><p>After that, you can install the provider plugin as you would <a class=\"xref\" href=\"/documentation/402811/guides/extend-testcafe/install-plugins\">install any other plugin</a>.</p>\r\n<h2 id=\"specify-a-browser-for-a-test-task__$\"><a class=\"anchor-fix\" href=\"#specify-a-browser-for-a-test-task\" id=\"specify-a-browser-for-a-test-task\"></a>Specify a Browser for a Test Task<a class=\"anchor-hash\" href=\"#specify-a-browser-for-a-test-task\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>When running tests, you can specify a browser accessed through the provider plugin by using a <em>browser alias</em>.\r\nThe alias consists of the browser provider name and the name of the browser itself (the latter may be omitted in some providers); for example, <code>saucelabs:Chrome@52.0:Windows 8.1</code> or <code>nightmare</code>.</p>\r\n<p>To obtain all the available aliases for your provider, run the <code>testcafe --list-browsers {shortProviderName}</code> command, where <code>{shortProviderName}</code> is the provider name (without the <code>testcafe-browser-provider-</code> prefix); for example, <code>testcafe --list-browsers my-provider</code>.</p>\r\n","headers":[{"title":"Generate Browser Provider Project","tagName":"h2","id":"generate-browser-provider-project","lvl":2},{"title":"Implement the Browser Provider","tagName":"h2","id":"implement-the-browser-provider","lvl":2},{"title":"Build the Provider","tagName":"h2","id":"build-the-provider","lvl":2},{"title":"Use the Provider Development Version","tagName":"h2","id":"use-the-provider-development-version","lvl":2},{"title":"Publish the Provider to npm","tagName":"h2","id":"publish-the-provider-to-npm","lvl":2},{"title":"Specify a Browser for a Test Task","tagName":"h2","id":"specify-a-browser-for-a-test-task","lvl":2}],"title":"Browser Provider Plugin","schema":null,"author":null,"preview":null,"description":null,"published":null},"topicUid":"402812","headerNav":{"items":[{"name":"TestCafe Studio","id":"TestCafe Studio"},{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started","items":[]},{"name":"API","id":"402632","url":"/documentation/402632/api","items":[]},{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes","items":[]},{"name":"Examples","id":"402637","url":"/documentation/402637/examples"},{"name":"FAQ","id":"403936","url":"/documentation/403936/faq","headerUrl":"/documentation/402636/faq/general-info","items":[]},{"name":"What's New","id":"What's New","url":"/release-notes","href":"/release-notes","items":[]},{"name":"Dashboard Alpha","id":"Dashboard Alpha","items":[]},{"name":"Support","id":"Support","url":"/support","href":"/support"}],"activeItems":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Extend TestCafe","id":"402634/Extend TestCafe"},{"name":"Browser Provider Plugin","id":"402812","url":"/documentation/402812/guides/extend-testcafe/browser-provider-plugin"}]},"sidebarNav":{"root":{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},"items":[{"name":"Overview","id":"402634/Overview","items":[{"name":"Getting Started","id":"402635","url":"/documentation/402635/guides/overview/getting-started"},{"name":"Why TestCafe?","id":"402631","url":"/documentation/402631/guides/overview/why-testcafe"}]},{"name":"Basic Guides","id":"402634/Basic Guides","items":[{"name":"Install TestCafe","id":"402834","url":"/documentation/402834/guides/basic-guides/install-testcafe"},{"name":"Test Structure","id":"402831","url":"/documentation/402831/guides/basic-guides/test-structure"},{"name":"Element Selectors","id":"402829","url":"/documentation/402829/guides/basic-guides/element-selectors"},{"name":"Test Actions","id":"402833","url":"/documentation/402833/guides/basic-guides/test-actions"},{"name":"Assertions","id":"402837","url":"/documentation/402837/guides/basic-guides/assertions"},{"name":"Client Functions","id":"402832","url":"/documentation/402832/guides/basic-guides/client-functions"},{"name":"Run Tests","id":"402830","url":"/documentation/402830/guides/basic-guides/run-tests"},{"name":"Debug Tests","id":"402835","url":"/documentation/402835/guides/basic-guides/debug-tests"}]},{"name":"Best Practices","id":"402634/Best Practices","items":[{"name":"Best Practices","id":"402836","url":"/documentation/402836/guides/best-practices/best-practices"},{"name":"Speed Up Test Execution","id":"402963","url":"/documentation/402963/guides/best-practices/speed-up-test-execution"},{"name":"Page Model","id":"402826","url":"/documentation/402826/guides/best-practices/page-model"},{"name":"Bootstrap your TestCafe project with create-testcafe","id":"404259","url":"/documentation/404259/guides/best-practices/create-testcafe"}]},{"name":"Intermediate Guides","id":"402634/Intermediate Guides","items":[{"name":"Native Automation FAQ","id":"404237","url":"/documentation/404237/guides/intermediate-guides/native-automation-mode"},{"name":"Browsers","id":"402828","url":"/documentation/402828/guides/intermediate-guides/browsers"},{"name":"Mobile Devices, Cloud Browsers and Emulation","id":"403584","url":"/documentation/403584/guides/intermediate-guides/mobile-devices-cloud-browsers-and-emulation"},{"name":"Visual Selector Debugger","id":"404288","url":"/documentation/404288/guides/intermediate-guides/visual-selector-debugger"},{"name":"Run Tests Concurrently","id":"403626","url":"/documentation/403626/guides/intermediate-guides/run-tests-concurrently"},{"name":"Reporters","id":"402825","url":"/documentation/402825/guides/intermediate-guides/reporters"},{"name":"TypeScript and CoffeeScript","id":"402824","url":"/documentation/402824/guides/intermediate-guides/typescript-and-coffeescript"},{"name":"Authentication and Roles","id":"402845","url":"/documentation/402845/guides/intermediate-guides/authentication"},{"name":"Screenshots and Videos","id":"402840","url":"/documentation/402840/guides/intermediate-guides/screenshots-and-videos"},{"name":"API Testing","id":"403971","url":"/documentation/403971/guides/intermediate-guides/api-testing"},{"name":"Hooks","id":"403435","url":"/documentation/403435/guides/intermediate-guides/hooks"},{"name":"Quarantine Mode","id":"403841","url":"/documentation/403841/guides/intermediate-guides/quarantine-mode"},{"name":"Live Mode","id":"403842","url":"/documentation/403842/guides/intermediate-guides/live-mode"},{"name":"Intercept HTTP Requests","id":"402842","url":"/documentation/402842/guides/intermediate-guides/intercept-http-requests"},{"name":"Metadata and Filtering","id":"403436","url":"/documentation/403436/guides/intermediate-guides/metadata-and-filtering"},{"name":"Multiple Browser Windows","id":"402841","url":"/documentation/402841/guides/intermediate-guides/multiple-browser-windows"}]},{"name":"Advanced Guides","id":"402634/Advanced Guides","items":[{"name":"Advanced Selector Techniques","id":"403655","url":"/documentation/403655/guides/advanced-guides/advanced-selector-techniques"},{"name":"Inject Client Scripts","id":"402843","url":"/documentation/402843/guides/advanced-guides/inject-client-scripts"},{"name":"ESM Module Support","id":"404258","url":"/documentation/404258/guides/advanced-guides/esm-module-support"},{"name":"Create Custom Test Actions","id":"404150","url":"/documentation/404150/guides/advanced-guides/custom-test-actions"},{"name":"Fire DOM Events","id":"403219","url":"/documentation/403219/guides/advanced-guides/fire-dom-events"},{"name":"Execute Shell Commands on Startup","id":"403849","url":"/documentation/403849/guides/advanced-guides/execute-shell-commands-on-startup"},{"name":"Test HTTPS Features and HTTP/2 Websites","id":"402839","url":"/documentation/402839/guides/advanced-guides/test-https-features-and-http2-websites"},{"name":"Modify Reporter Output","id":"404388","url":"/documentation/404388/guides/advanced-guides/modify-reporter-output"},{"name":"Detect the Client Browser and Platform","id":"402844","url":"/documentation/402844/guides/advanced-guides/detect-the-client-browser-and-platform"},{"name":"Use the TestCafe Docker Image","id":"402838","url":"/documentation/402838/guides/advanced-guides/use-testcafe-docker-image"},{"name":"Built-In Wait Mechanisms","id":"402827","url":"/documentation/402827/guides/advanced-guides/built-in-wait-mechanisms"},{"name":"Replay Chrome User Flow Recordings","id":"403998","url":"/documentation/403998/guides/advanced-guides/chrome-replay-support"}]},{"name":"Continuous Integration","id":"402809","url":"/documentation/402809/guides/continuous-integration","items":[{"name":"Integrate TestCafe with AppVeyor","id":"402823","url":"/documentation/402823/guides/continuous-integration/appveyor"},{"name":"Integrate TestCafe with Azure DevOps","id":"402822","url":"/documentation/402822/guides/continuous-integration/azure-devops"},{"name":"Run Tests in Bitbucket Pipelines","id":"402821","url":"/documentation/402821/guides/continuous-integration/bitbucket-pipelines"},{"name":"Integrate TestCafe With CircleCI","id":"402819","url":"/documentation/402819/guides/continuous-integration/circleci"},{"name":"Run Tests on LambdaTest with CircleCI","id":"402820","url":"/documentation/402820/guides/continuous-integration/circleci-and-lambdatest"},{"name":"Integrate TestCafe with GitHub Actions","id":"402817","url":"/documentation/402817/guides/continuous-integration/github-actions"},{"name":"Run Tests on BrowserStack with GitHub Actions","id":"402818","url":"/documentation/402818/guides/continuous-integration/github-actions-and-browserstack"},{"name":"Integrate TestCafe with GitLab","id":"402816","url":"/documentation/402816/guides/continuous-integration/gitlab"},{"name":"Integrate TestCafe with Jenkins","id":"402815","url":"/documentation/402815/guides/continuous-integration/jenkins"},{"name":"Integrate TestCafe with TeamCity","id":"402847","url":"/documentation/402847/guides/continuous-integration/teamcity"},{"name":"Run Tests in Travis CI","id":"402813","url":"/documentation/402813/guides/continuous-integration/travis"},{"name":"Run Tests on Sauce Labs with Travis CI","id":"402814","url":"/documentation/402814/guides/continuous-integration/travis-and-sauce-labs"}]},{"name":"Extend TestCafe","id":"402634/Extend TestCafe","items":[{"name":"Install Plugins","id":"402811","url":"/documentation/402811/guides/extend-testcafe/install-plugins"},{"name":"Reporter Plugin","id":"402810","url":"/documentation/402810/guides/extend-testcafe/reporter-plugin"},{"name":"Browser Provider Plugin","id":"402812","url":"/documentation/402812/guides/extend-testcafe/browser-provider-plugin"}]}],"activeItems":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Extend TestCafe","id":"402634/Extend TestCafe"},{"name":"Browser Provider Plugin","id":"402812","url":"/documentation/402812/guides/extend-testcafe/browser-provider-plugin"}],"showLeafs":true},"breadcrumbsNav":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Extend TestCafe","id":"402634/Extend TestCafe"},{"name":"Browser Provider Plugin","id":"402812","url":"/documentation/402812/guides/extend-testcafe/browser-provider-plugin"}],"publishDates":{"teamBlog":[1687305600000,1667260800000,1661904000000,1657584000000,1637107200000,1633564800000,1632268800000,1626220800000,1612828800000,1609113600000,1607644800000,1605657600000,1605571200000,1600905600000,1599091200000,1598400000000,1597968000000,1597795200000,1595980800000,1594684800000,1593475200000,1590364800000,1587340800000],"releaseNotes":[1693267200000,1692230400000,1690416000000,1687305600000,1685318400000,1683763200000,1680739200000,1678147200000,1675036800000,1672272000000,1668038400000,1661904000000,1659916800000,1658102400000,1653523200000,1642464000000,1640131200000,1633132800000,1631059200000,1625702400000,1617753600000,1616371200000,1614729600000,1613347200000,1607990400000,1596672000000,1579219200000,1574294400000,1571184000000,1568246400000,1565136000000,1562284800000,1562025600000,1551312000000,1549497600000,1549497600000,1541548800000,1540425600000,1535932800000,1533168000000,1526342400000,1519862400000,1507593600000,1506643200000,1501632000000,1497312000000,1493164800000,1490659200000,1487203200000,1484784000000,1481155200000,1478563200000,1476662400000]}},"__N_SSG":true}