{"pageProps":{"content":{"html":"        <h1>Element Selectors</h1>\r\n\r\n<h2 id=\"article-summary__$\"><a class=\"anchor-fix\" href=\"#article-summary\" id=\"article-summary\"></a>Article Summary<a class=\"anchor-hash\" href=\"#article-summary\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Element Selectors are similar in purpose to CSS Selectors. Selectors filter the DOM and return page elements that match your criteria. The following Selector returns an element with the <code>big-red-button</code> ID:</p>\r\n<pre><code class=\"lang-js\">Selector(&#39;#big-red-button&#39;);\r\n</code></pre><p><a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions\">Test actions</a> and <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions\">assertions</a> accept Selector queries as arguments:</p>\r\n<pre><code class=\"lang-js\">await t.click(Selector(&#39;#big-red-button&#39;));\r\n</code></pre><p>You can use the <a class=\"xref\" href=\"/documentation/404288/guides/intermediate-guides/visual-selector-debugger\">Selector Generator</a> to interactively generate and debug Selector queries.</p>\r\n<p>Execute <em>standalone</em> Selector queries to <a class=\"xref\" href=\"/documentation/403654/recipes/basics/selector-recipes#examine-dom-elements-dom-node-snapshot\">examine the page</a>. The following query returns the <code>textContent</code> of the <code>#header</code> element:</p>\r\n<pre><code class=\"lang-js\">const headerText = await Selector(&#39;#header&#39;).textContent;\r\n</code></pre><p>TestCafe includes three selector types.</p>\r\n<ul>\r\n<li>Keyword-based Selectors look for elements that match the CSS Selector argument.</li>\r\n<li>Function-based Selectors filter the DOM with a client-side function.</li>\r\n<li>Selector-based Selectors extend other Selector queries.</li>\r\n</ul>\r\n<p>Selector methods narrow down your element selection. Unlike CSS Keyword queries, Selector methods can freely traverse the DOM tree.</p>\r\n<p>Users of popular front-end frameworks, such as React and Angular, can create Selectors that reference components by name. </p>\r\n<h2 id=\"table-of-contents__$\"><a class=\"anchor-fix\" href=\"#table-of-contents\" id=\"table-of-contents\"></a>Table of Contents<a class=\"anchor-hash\" href=\"#table-of-contents\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<ul>\r\n<li><a href=\"#introduction\">Introduction</a></li>\r\n<li><a href=\"#element-selector-basics\">Element Selector Basics</a><ul>\r\n<li><a href=\"#use-element-selectors-with-actions-and-assertions\">Use Element Selectors with Actions and Assertions</a></li>\r\n<li><a href=\"#simple-selectors-and-compound-selectors\">Simple Selectors and Compound Selectors</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#how-selectors-work\">How Selectors Work</a></li>\r\n<li><a href=\"#selector-types\">Selector Types</a></li>\r\n<li><a href=\"#keyword-based-selectors\">Keyword-Based Selectors</a><ul>\r\n<li><a href=\"#selector-keywords\">Selector Keywords</a></li>\r\n<li><a href=\"#top-tip-use-custom-html-attributes\">Top Tip: Use Custom HTML Attributes</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#function-based-selectors\">Function-based Selectors</a></li>\r\n<li><a href=\"#selector-based-selectors\">Selector-Based Selectors</a><ul>\r\n<li><a href=\"#copy-and-extend-another-selectors-query\">Copy and extend another Selector’s query</a></li>\r\n<li><a href=\"#copy-and-filter-another-selectors-results\">Copy and filter another Selector’s results</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#selector-options\">Selector Options</a><ul>\r\n<li><a href=\"#boundtestrun\">boundTestRun</a></li>\r\n<li><a href=\"#dependencies\">dependencies</a></li>\r\n<li><a href=\"#visibilitycheck\">visibilityCheck</a></li>\r\n<li><a href=\"#timeout\">timeout</a></li>\r\n<li><a href=\"#override-selector-options\">Override Selector Options</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#selector-methods\">Selector Methods</a><ul>\r\n<li><a href=\"#why-use-selector-methods\">Why use Selector Methods</a></li>\r\n<li><a href=\"#selector-method-types\">Selector Method Types</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#framework-specific-selectors\">Framework-Specific Selectors</a><ul>\r\n<li><a href=\"#react\">React</a></li>\r\n<li><a href=\"#angular\">Angular</a></li>\r\n<li><a href=\"#angularjs\">AngularJS</a></li>\r\n<li><a href=\"#vue\">Vue</a></li>\r\n<li><a href=\"#aurelia\">Aurelia</a></li>\r\n</ul>\r\n</li>\r\n<li><a href=\"#reuse-element-selectors\">Reuse Element Selectors</a></li>\r\n<li><a href=\"#selector-limitations\">Selector Limitations</a></li>\r\n<li><a href=\"#access-the-shadow-dom\">Access the Shadow DOM</a></li>\r\n<li><a href=\"#debug-selectors\">Debug Selectors</a></li>\r\n<li><a href=\"#further-reading\">Further Reading</a></li>\r\n</ul>\r\n<h2 id=\"introduction__$\"><a class=\"anchor-fix\" href=\"#introduction\" id=\"introduction\"></a>Introduction<a class=\"anchor-hash\" href=\"#introduction\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p><a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions\">Actions</a> and <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions\">assertions</a> use Selector query arguments to locate their targets:</p>\r\n<pre><code class=\"lang-js\">t.click(&#39;#big-red-button&#39;);\r\n</code></pre><p>The <code>t.click</code> action targets the result of the <code>#big-red-button</code> Selector query. This query matches elements with the <code>big-red-button</code> ID.</p>\r\n<h2 id=\"element-selector-basics__$\"><a class=\"anchor-fix\" href=\"#element-selector-basics\" id=\"element-selector-basics\"></a>Element Selector Basics<a class=\"anchor-hash\" href=\"#element-selector-basics\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Selector queries begin with an invocation of the <code>Selector()</code> constructor. Constructor <em>arguments</em> determine the initial results of the Selector query.</p>\r\n<pre><code class=\"lang-js\">Selector(/*arguments go here*/);\r\n</code></pre><p>There are <a href=\"#selector-types\">three ways</a> to initialize a Selector. The most common way is to use a <a href=\"#keyword-based-selectors\">CSS Keyword</a>:</p>\r\n<pre><code class=\"lang-js\">Selector(&#39;button&#39;);\r\n</code></pre><p>The Selector above returns all the <code>button</code> elements on the page.</p>\r\n<p>After you initialize a Selector, you can perform additional actions with the results of the query. Append <a href=\"#selector-methods\">Selector methods</a> to the constructor:</p>\r\n<pre><code class=\"lang-js\">Selector(&#39;button&#39;).withText(&#39;click me&#39;);\r\n</code></pre><p>The <code>withText</code> method helped you narrow down the results. The query above only matches <code>button</code> elements with the “click me” label.</p>\r\n<h3 id=\"use-element-selectors-with-actions-and-assertions__$\"><a class=\"anchor-fix\" href=\"#use-element-selectors-with-actions-and-assertions\" id=\"use-element-selectors-with-actions-and-assertions\"></a>Use Element Selectors with Actions and Assertions<a class=\"anchor-hash\" href=\"#use-element-selectors-with-actions-and-assertions\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p><a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions\">Actions</a> and <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions\">assertions</a> use Selector queries to identify their targets.</p>\r\n<div class=\"NOTE\"><p class=\"alert-title\">Note</p><p>TestCafe actions <a href=\"https://github.com/DevExpress/testcafe/issues/2813\" target=\"_blank\">can’t target pseudo-elements<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> and require additional code to <a href=\"#access-the-shadow-dom\">target the Shadow DOM</a>.</p>\r\n</div>\r\n<p>You can pass any valid Selector query to an action or an assertion:</p>\r\n<pre><code class=\"lang-js\">t.click(Selector(&#39;#big-red-button&#39;));\r\n</code></pre><p>If your Selector query does not include <a href=\"#selector-methods\">methods</a>, you can omit the <code>Selector</code> keyword:</p>\r\n<pre><code class=\"lang-js\">t.click(&#39;#big-red-button&#39;);\r\n</code></pre><h3 id=\"simple-selectors-and-compound-selectors__$\"><a class=\"anchor-fix\" href=\"#simple-selectors-and-compound-selectors\" id=\"simple-selectors-and-compound-selectors\"></a>Simple Selectors and Compound Selectors<a class=\"anchor-hash\" href=\"#simple-selectors-and-compound-selectors\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p><strong>Simple</strong> Selectors filter the DOM once:</p>\r\n<pre><code class=\"lang-js\">Selector(&#39;#big-red-button&#39;);\r\n</code></pre><p><strong>Compound</strong> Selectors filter the DOM multiple times:</p>\r\n<pre><code class=\"lang-js\">Selector(&#39;nav .button&#39;);\r\n// or \r\nSelector(&#39;nav&#39;).find(&#39;.button&#39;)\r\n</code></pre><p>The example above matches <code>button</code> class elements that reside inside <code>nav</code> blocks.</p>\r\n<h2 id=\"how-selectors-work__$\"><a class=\"anchor-fix\" href=\"#how-selectors-work\" id=\"how-selectors-work\"></a>How Selectors Work<a class=\"anchor-hash\" href=\"#how-selectors-work\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Selectors are asynchronous.</p>\r\n<p>TestCafe executes Selector queries when it encounters them in actions and assertions.</p>\r\n<p>Element selectors can return multiple items. The <a class=\"xref\" href=\"/documentation/402755/reference/test-api/selector/count\">selector.count</a> property indicates the number of page elements that match the query.</p>\r\n<p>If a page action / assertion Selector matches multiple DOM elements, TestCafe performs the action / assertion with the first matching element.</p>\r\n<p>If a Selector query yields zero matches, its return value is <strong>null</strong>. If a test action uses this Selector, the test fails. If you pass such a Selector to an assertion that expects a non-null return value, the test fails, too:</p>\r\n<pre><code class=\"lang-js\">await t.expect(Selector(&#39;.holyGrail&#39;).count).eql(1)\r\n.expect(Selector(&#39;.holyGrail&#39;).exists).ok()\r\n</code></pre><p>If you save a Selector query to a variable, TestCafe only executes the query when you call or <a class=\"xref\" href=\"/documentation/402670/reference/test-api/domnodestate\">await</a> that variable.</p>\r\n<p>The example below contains three identical actions. Yet, since every action changes the DOM, each call of the <code>buttons</code> variable yields a different result.</p>\r\n<pre><code class=\"lang-js\">test(&#39;Click a button&#39;, async t =&gt; {\r\n    const buttons = Selector(&#39;button&#39;).withText(&quot;A button number&quot;);\r\n\r\n    await t\r\n        .click(buttons.nth(0))\r\n        .click(buttons.nth(0))\r\n        .click(buttons.nth(0))\r\n});\r\n</code></pre><pre><code class=\"lang-html\">&lt;html&gt;\r\n    &lt;body&gt;\r\n        &lt;div&gt;\r\n        &lt;button onclick= &quot;this.textContent= &#39;Pressed&#39;;&quot;&gt;A button number 1&lt;/button&gt;\r\n        &lt;button onclick= &quot;this.textContent= &#39;Pressed&#39;;&quot;&gt;A button number 2&lt;/button&gt;\r\n        &lt;button onclick= &quot;this.textContent= &#39;Pressed&#39;;&quot;&gt;A button number 3&lt;/button&gt;\r\n        &lt;/div&gt;\r\n    &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre><h2 id=\"selector-types__$\"><a class=\"anchor-fix\" href=\"#selector-types\" id=\"selector-types\"></a>Selector Types<a class=\"anchor-hash\" href=\"#selector-types\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<ul>\r\n<li><a href=\"#keyword-based-selectors\">Keyword-Based Selectors</a> filter the page in search of elements that match a CSS Selector.</li>\r\n<li><a href=\"#function-based-selectors\">Function-Based Selectors</a> execute a client-side function that traverses the DOM.</li>\r\n<li><a href=\"#function-based-selectors\">Selector-Based Selectors</a> execute, or filter the results of, another Selector query.</li>\r\n</ul>\r\n<p>Additional libraries enable the use of <a href=\"#framework-specific-selectors\">Framework-Specific Selectors</a>.</p>\r\n<h2 id=\"keyword-based-selectors__$\"><a class=\"anchor-fix\" href=\"#keyword-based-selectors\" id=\"keyword-based-selectors\"></a>Keyword-Based Selectors<a class=\"anchor-hash\" href=\"#keyword-based-selectors\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Keyword-Based Selectors filter the page in search of elements that match <a href=\"#selector-keywords\">CSS keywords</a>.</p>\r\n<pre><code class=\"lang-js\">Selector(&#39;#some-element&#39;);\r\n</code></pre><p>A few examples:</p>\r\n<ul>\r\n<li><code>body</code> matches the <code>body</code> element.</li>\r\n<li><code>.login</code> matches elements with the <code>login</code> class name.</li>\r\n<li><code>#input</code> matches the first element with the <code>input</code> ID.</li>\r\n</ul>\r\n<h3 id=\"selector-keywords__$\"><a class=\"anchor-fix\" href=\"#selector-keywords\" id=\"selector-keywords\"></a>Selector Keywords<a class=\"anchor-hash\" href=\"#selector-keywords\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>TestCafe Selector keywords are syntactically identical to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors\" target=\"_blank\">CSS Selectors<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>. </p>\r\n<h3 id=\"top-tip-use-custom-html-attributes__$\"><a class=\"anchor-fix\" href=\"#top-tip-use-custom-html-attributes\" id=\"top-tip-use-custom-html-attributes\"></a>Top Tip: Use Custom HTML Attributes<a class=\"anchor-hash\" href=\"#top-tip-use-custom-html-attributes\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Keywords that reference custom HTML attributes are more reliable, because they don’t reference mutable code.</p>\r\n<ul>\r\n<li><strong>Selectors break</strong> when you <em>change</em> the page code that they reference.</li>\r\n<li><strong>Bad Selectors</strong> reference class names or DOM relationships – things that change fairly often during development.</li>\r\n<li><strong>Reliable Selectors</strong> reference properties that are independent of page design and layout.</li>\r\n</ul>\r\n<p>Mark your actions’ targets with custom HTML attributes, and write better, more reliable Selectors. </p>\r\n<ol>\r\n<li>Add a custom HTML attribute (for example: <code>data-test-id</code>) to all the page elements that your test interacts with.</li>\r\n<li>Reference your attribute when you write Selector queries:</li>\r\n</ol>\r\n<pre><code>t.click(&#39;button&#39;).withAttribute(&#39;data-test-id&#39;,&#39;left-button&#39;) // or\r\nt.click(&#39;[data-test-id=&quot;left-button&quot;]&#39;)\r\n</code></pre><h2 id=\"function-based-selectors__$\"><a class=\"anchor-fix\" href=\"#function-based-selectors\" id=\"function-based-selectors\"></a>Function-based Selectors<a class=\"anchor-hash\" href=\"#function-based-selectors\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Function-based Selectors execute a client-side function that traverses the DOM and returns one of the following objects:</p>\r\n<ul>\r\n<li>A DOM node</li>\r\n<li>An array of DOM nodes</li>\r\n<li>A <code>NodeList</code> object</li>\r\n<li>An <code>HTMLCollection</code> object</li>\r\n<li>A <code>null</code> object</li>\r\n<li>An <code>undefined</code> object</li>\r\n</ul>\r\n<p>The function-based Selector below retrieves a string from <code>localStorage</code> and finds a DOM element with the identical ID:</p>\r\n<pre><code class=\"lang-js\">const element = Selector(() =&gt; {\r\n    const storedElementId = window.localStorage.storedElementId;\r\n    return document.getElementById(storedElementId);\r\n});\r\n</code></pre><p>Function-based Selectors can have additional parameters:</p>\r\n<pre><code class=\"lang-js\">const elementWithId = Selector(id =&gt; {\r\n    return document.getElementById(id);\r\n});\r\n\r\nawait t.click(elementWithId(&#39;buy&#39;));\r\n</code></pre><h2 id=\"selector-based-selectors__$\"><a class=\"anchor-fix\" href=\"#selector-based-selectors\" id=\"selector-based-selectors\"></a>Selector-Based Selectors<a class=\"anchor-hash\" href=\"#selector-based-selectors\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>You can create Selectors based on other Selectors. This is an easy way to extend existing Selector queries or filter their results.</p>\r\n<h3 id=\"copy-and-extend-another-selectors-query__$\"><a class=\"anchor-fix\" href=\"#copy-and-extend-another-selectors-query\" id=\"copy-and-extend-another-selectors-query\"></a>Copy and extend another Selector’s query<a class=\"anchor-hash\" href=\"#copy-and-extend-another-selectors-query\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>You can create a new Selector based on another Selector’s query.</p>\r\n<p>The example code below saves a simple Selector query to the <code>parent</code> variable. It then declares a <code>child</code> variable that adds the <code>find</code> method to the original Selector.</p>\r\n<pre><code class=\"lang-js\">const parent = Selector(&#39;div&#39;); // filters the DOM\r\nconst child = parent.find(&#39;button&#39;); // inherits the &quot;parent&quot; query, modifies it, and filters the DOM again\r\n</code></pre><p>Note that the <code>child</code> Selector does not inherit the return value of the <code>parent</code> Selector.</p>\r\n<p>You can also nest Selectors. If you pass Selector A to Selector B as an argument, Selector B inherits Selector A’s query. This is an easy way to create a Selector copy with modified options.</p>\r\n<p>The example below saves a simple Selector query to the <code>ctaButton</code> variable and passes it to another Selector. As a result, the second Selector inherits the first Selector’s <em>query</em>. However, since the second Selector enables the <code>visibilityCheck</code> option, it only matches <em>visible</em> elements.</p>\r\n<pre><code class=\"lang-js\">const ctaButton = Selector(&#39;.cta-button&#39;); // \r\nSelector(ctaButton, { visibilityCheck: true });\r\n</code></pre><p>You can even pass arguments to Selectors within Selectors:</p>\r\n<pre><code class=\"lang-js\">const elementWithIdOrClassName = Selector(value =&gt; {\r\n    return document.getElementById(value) || document.getElementsByClassName(value);\r\n});\r\nconst submitButton = Selector(elementWithIdOrClassName(&#39;main-element&#39;));\r\n</code></pre><h3 id=\"copy-and-filter-another-selectors-results__$\"><a class=\"anchor-fix\" href=\"#copy-and-filter-another-selectors-results\" id=\"copy-and-filter-another-selectors-results\"></a>Copy and filter another Selector’s results<a class=\"anchor-hash\" href=\"#copy-and-filter-another-selectors-results\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>You can create a new Selector based on another Selector’s return value.</p>\r\n<p>If you want to copy the query’s <strong>return value</strong>, you need to asynchronously execute the query. Asynchronous Selector calls return a <a class=\"xref\" href=\"/documentation/402670/reference/test-api/domnodestate\">DOM Node State</a> object that contains the query’s results. If you pass this object to another Selector, you can filter the original Selector’s results.</p>\r\n<p>In the example below, the <code>visibleTopMenu</code> Selector filters the return value of the <code>topMenuSnapshot</code> Selector. Since it contains an additional <code>visibilityCheck</code> option, it only returns visible elements.</p>\r\n<pre><code class=\"lang-js\">const topMenuSnapshot = await Selector(&#39;#top-menu&#39;)(); // TestCafe executes this query asynchronously, filters the DOM and returns a DOMNodeState object.\r\nconst visibleTopMenu = Selector(topMenuSnapshot, { visibilityCheck: true }); // TestCafe doesn&#39;t filter the DOM. It only filters the results of the topMenuSnapshot query\r\n</code></pre><h2 id=\"selector-options__$\"><a class=\"anchor-fix\" href=\"#selector-options\" id=\"selector-options\"></a>Selector Options<a class=\"anchor-hash\" href=\"#selector-options\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<blockquote><p>Main article: <a class=\"xref\" href=\"/documentation/402756/reference/test-api/selector/constructor#options\">Selector Constructor</a>.</p>\r\n</blockquote>\r\n<p>Use constructor options to customize Selector behavior.</p>\r\n<h3 id=\"boundtestrun__$\"><a class=\"anchor-fix\" href=\"#boundtestrun\" id=\"boundtestrun\"></a>boundTestRun<a class=\"anchor-hash\" href=\"#boundtestrun\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>boundTestRun</code> option binds the <code>TestController</code> object to a Node.js callback. This is necessary to execute Selectors inside the callback function.</p>\r\n<h3 id=\"dependencies__$\"><a class=\"anchor-fix\" href=\"#dependencies\" id=\"dependencies\"></a>dependencies<a class=\"anchor-hash\" href=\"#dependencies\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Use the <code>dependencies</code> option to share data with a Selector function.</p>\r\n<h3 id=\"visibilitycheck__$\"><a class=\"anchor-fix\" href=\"#visibilitycheck\" id=\"visibilitycheck\"></a>visibilityCheck<a class=\"anchor-hash\" href=\"#visibilitycheck\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>If the <code>visibilityCheck</code> option is <code>true</code>, TestCafe imposes a visibility requirement on Selector targets.</p>\r\n<p>TestCafe does not interact with invisible elements.</p>\r\n<p>If the element or one of its parents meets the following criteria, TestCafe considers the element to be <strong>invisible</strong>.</p>\r\n<ul>\r\n<li>The value of the element’s <code>display</code> property is <code>none</code></li>\r\n<li>The value of the element’s <code>visibility</code> property is <code>hidden</code> or <code>collapse</code></li>\r\n<li>The element has a <code>width</code> or <code>height</code> of <code>0</code>.</li>\r\n</ul>\r\n<p>Elements that do not meet these criteria may still be invisible to the user. The following factors <strong>do not</strong> influence the element’s visibility status:</p>\r\n<ul>\r\n<li>The element’s <code>z-index</code></li>\r\n<li>The element’s <code>opacity</code></li>\r\n<li>The element’s position on the page</li>\r\n</ul>\r\n<h3 id=\"timeout__$\"><a class=\"anchor-fix\" href=\"#timeout\" id=\"timeout\"></a>timeout<a class=\"anchor-hash\" href=\"#timeout\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>When TestCafe runs tests, it automatically waits for action targets to appear and <a class=\"xref\" href=\"/documentation/402751/reference/test-api/selector/filtervisible#visibility-criteria\">become visible</a>. The value of the <em>element selector timeout</em> variable defines the maximum waiting time. If a <em>visible</em> DOM element that matches a Selector query does not appear on the page within the <em>element selector timeout</em>, the test fails.</p>\r\n<p>Use the <a class=\"xref\" href=\"/documentation/402756/reference/test-api/selector/constructor#optionstimeout\">timeout</a> Selector option to specify a custom selector timeout.</p>\r\n<p>Selector timeouts have no effect on <a class=\"xref\" href=\"/documentation/402754/reference/test-api/selector/exists\">Selector.exists</a> and <a class=\"xref\" href=\"/documentation/402755/reference/test-api/selector/count\">Selector.count</a> properties. TestCafe calculates their values immediately. If you want to evaluate these properties in an assertion, set a custom <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions#assertion-timeout\">assertion timeout</a>.</p>\r\n<pre><code class=\"lang-js\">await t.expect(Selector(&#39;#elementId&#39;, { timeout: 500 }).innerText).eql(&#39;text&#39;, &#39;check element text&#39;);\r\n</code></pre><p>See <a class=\"xref\" href=\"https://docs.devexpress.com/TestCafeStudio/400177/basic-guides/run-tests?v=1.8\" target=\"_blank\">Automatic Waiting<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> for more information.</p>\r\n<h3 id=\"override-selector-options__$\"><a class=\"anchor-fix\" href=\"#override-selector-options\" id=\"override-selector-options\"></a>Override Selector Options<a class=\"anchor-hash\" href=\"#override-selector-options\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Use the <a class=\"xref\" href=\"/documentation/402743/reference/test-api/selector/with\">with</a> method to override the <a class=\"xref\" href=\"/documentation/402743/reference/test-api/selector/with#options\">options</a> of another Selector.</p>\r\n<pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\r\n\r\nconst elementWithId = Selector(id =&gt; document.getElementById(id));\r\n\r\nfixture `My fixture`\r\n    .page `http://www.example.com/`;\r\n\r\ntest(&#39;My Test&#39;, async t =&gt; {\r\n    const visibleElementWithId = elementWithId.with({\r\n        visibilityCheck: true\r\n    });\r\n\r\n    const visibleButton = await visibleElementWithId(&#39;submit-button&#39;);\r\n});\r\n</code></pre><h2 id=\"selector-methods__$\"><a class=\"anchor-fix\" href=\"#selector-methods\" id=\"selector-methods\"></a>Selector Methods<a class=\"anchor-hash\" href=\"#selector-methods\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Selector methods perform additional actions with the return value of the main Selector query. Selector methods narrow, expand, or otherwise modify the selection of page elements.</p>\r\n<pre><code class=\"lang-js\">Selector(&#39;keyword1 keyword2&#39;).method1().method2();\r\n</code></pre><h3 id=\"why-use-selector-methods__$\"><a class=\"anchor-fix\" href=\"#why-use-selector-methods\" id=\"why-use-selector-methods\"></a>Why use Selector Methods<a class=\"anchor-hash\" href=\"#why-use-selector-methods\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Keyword-based Selectors have limited capabilities. </p>\r\n<p>Complex <a href=\"#keyword-based-selectors\">keyword-based Selectors</a> are long and difficult to maintain:</p>\r\n<pre><code class=\"lang-js\">await t.click(&#39;div &gt; .my-class &gt; div:nth-child(2) &gt; span &gt; a[href=&quot;https://my-site.com/page&quot;]&#39;);\r\n</code></pre><p>CSS selectors cannot query parent elements:</p>\r\n<pre><code class=\"lang-html\">&lt;html&gt;\r\n    &lt;body&gt;\r\n        &lt;!-- ... --&gt;\r\n                    &lt;div&gt;\r\n                        &lt;!-- you cannot query this div by its child&#39;s ID --&gt;\r\n                        &lt;div&gt;\r\n                            &lt;div id=&quot;query-my-parent&quot;&gt;&lt;/div&gt;\r\n                        &lt;/div&gt;\r\n                    &lt;/div&gt;\r\n        &lt;!-- ... --&gt;\r\n    &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre><p>Selector methods can overcome these limitations and freely traverse the DOM tree:</p>\r\n<pre><code class=\"lang-js\">const link = Selector(&#39;div&#39;)\r\n    .child(&#39;.my-class&#39;)\r\n    .child(&#39;div&#39;)\r\n    .nth(2)\r\n    .child(&#39;span&#39;)\r\n    .child(&#39;a&#39;)\r\n    .withAttribute(&#39;href&#39;, &#39;https://my-site.com/page&#39;);\r\n\r\nconst parent = Selector(&#39;#query-my-parent&#39;).parent();\r\n</code></pre><h3 id=\"selector-method-types__$\"><a class=\"anchor-fix\" href=\"#selector-method-types\" id=\"selector-method-types\"></a>Selector Method Types<a class=\"anchor-hash\" href=\"#selector-method-types\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<ul>\r\n<li><a href=\"#filter-methods\">Filter methods</a> filter the page element selection.</li>\r\n<li><a href=\"#related-element-lookup-methods\">Related Element Lookup methods</a> look for page elements related to the existing element selection.</li>\r\n</ul>\r\n<h3 id=\"filter-methods__$\"><a class=\"anchor-fix\" href=\"#filter-methods\" id=\"filter-methods\"></a>Filter Methods<a class=\"anchor-hash\" href=\"#filter-methods\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Filter methods filter the page element selection.</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>Method</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402748/reference/test-api/selector/nth\">nth</a></td>\r\n<td>Finds the element with the specified <em>index</em>. The index starts at 0. Negative index values indicate the element’s location relative to the final element of the array.</td>\r\n</tr>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402740/reference/test-api/selector/withtext\">withText</a></td>\r\n<td>Finds elements with a <code>textContent</code> value that <em>contains</em> the specified case-sensitive string or matches the regular expression.</td>\r\n</tr>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402741/reference/test-api/selector/withexacttext\">withExactText</a></td>\r\n<td>Finds elements with a <code>textContent</code> value equal to the specified string (case-sensitive).</td>\r\n</tr>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402742/reference/test-api/selector/withattribute\">withAttribute</a></td>\r\n<td>Finds elements with the specified attribute or attribute value.</td>\r\n</tr>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402751/reference/test-api/selector/filtervisible\">filterVisible</a></td>\r\n<td>Finds visible elements.</td>\r\n</tr>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402752/reference/test-api/selector/filterhidden\">filterHidden</a></td>\r\n<td>Finds hidden elements.</td>\r\n</tr>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402753/reference/test-api/selector/filter\">filter</a></td>\r\n<td>Finds elements that match a CSS selector, or meet the conditions of a filter function.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h3 id=\"related-element-lookup-methods__$\"><a class=\"anchor-fix\" href=\"#related-element-lookup-methods\" id=\"related-element-lookup-methods\"></a>Related Element Lookup Methods<a class=\"anchor-hash\" href=\"#related-element-lookup-methods\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Related element lookup methods find elements related to the existing element selection.</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>Method</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402750/reference/test-api/selector/find\">find</a></td>\r\n<td>Returns an array of descendant nodes that match a CSS Selector, or meet the conditions of a filter function.</td>\r\n</tr>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402747/reference/test-api/selector/parent\">parent</a></td>\r\n<td>Returns an array of parent elements.</td>\r\n</tr>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402757/reference/test-api/selector/child\">child</a></td>\r\n<td>Returns an array of child elements.</td>\r\n</tr>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402744/reference/test-api/selector/sibling\">sibling</a></td>\r\n<td>Returns an array of sibling elements.</td>\r\n</tr>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402749/reference/test-api/selector/nextsibling\">nextSibling</a></td>\r\n<td>Returns an array of succeeding sibling elements.</td>\r\n</tr>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402746/reference/test-api/selector/prevsibling\">prevSibling</a></td>\r\n<td>Returns an array of preceding sibling elements.</td>\r\n</tr>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402745/reference/test-api/selector/shadowroot\">shadowRoot</a></td>\r\n<td>Returns the <strong>shadow root</strong> node.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"framework-specific-selectors__$\"><a class=\"anchor-fix\" href=\"#framework-specific-selectors\" id=\"framework-specific-selectors\"></a>Framework-Specific Selectors<a class=\"anchor-hash\" href=\"#framework-specific-selectors\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Users of popular front-end frameworks can simplify their Selectors with the help of special TestCafe plugins. </p>\r\n<p>For instance, users that install the <a href=\"#react\">testcafe-react-selectors</a> plugin can reference the React component tree.</p>\r\n<div class=\"NOTE\"><p class=\"alert-title\">Note</p><p>Front-end development tools (such as React DevTools or Vue DevTools) can interfere with TestCafe and cause errors. Do not open them when you run or debug TestCafe tests.</p>\r\n</div>\r\n<h3 id=\"react__$\"><a class=\"anchor-fix\" href=\"#react\" id=\"react\"></a>React<a class=\"anchor-hash\" href=\"#react\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Install the <a href=\"https://github.com/DevExpress/testcafe-react-selectors\" target=\"_blank\">testcafe-react-selectors<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> npm package. </p>\r\n<p>Import the <code>ReactSelector</code> method to reference React components by name.</p>\r\n<p>For more information, refer to the <a href=\"https://github.com/DevExpress/testcafe-react-selectors/blob/master/README.md\" target=\"_blank\">official plugin documentation<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>.</p>\r\n<pre><code class=\"lang-js\">import { ReactSelector } from &#39;testcafe-react-selectors&#39;;\r\nconst reactComponent      = ReactSelector(&#39;MyComponent&#39;);\r\nconst reactComponentState = await reactComponent.getReact();\r\n\r\n// &gt;&gt; reactComponentState\r\n//\r\n// {\r\n//     props:    &lt;component_props&gt;,\r\n//     state:    &lt;component_state&gt;\r\n// }\r\n</code></pre><h3 id=\"angular__$\"><a class=\"anchor-fix\" href=\"#angular\" id=\"angular\"></a>Angular<a class=\"anchor-hash\" href=\"#angular\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Install the <a href=\"https://github.com/DevExpress/testcafe-angular-selectors\" target=\"_blank\">testcafe-angular-selectors<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> npm package. </p>\r\n<p>Import the <code>AngularSelector</code> method to reference Angular components by name. Call the method without parameters to obtain the project’s root element.</p>\r\n<p>For more information, refer to the <a href=\"https://github.com/DevExpress/testcafe-angular-selectors/blob/master/angular-selector.md\" target=\"_blank\">official plugin documentation<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>.</p>\r\n<pre><code class=\"lang-js\">import { AngularSelector } from &#39;testcafe-angular-selectors&#39;;\r\n\r\nconst rootAngular       = AngularSelector();\r\nconst list        = AngularSelector(&#39;list&#39;);\r\nconst listAngular = await list.getAngular();\r\n\r\nawait t.expect(listAngular.testProp).eql(1);\r\n</code></pre><h3 id=\"angularjs__$\"><a class=\"anchor-fix\" href=\"#angularjs\" id=\"angularjs\"></a>AngularJS<a class=\"anchor-hash\" href=\"#angularjs\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Install the <a href=\"https://github.com/DevExpress/testcafe-angular-selectors\" target=\"_blank\">testcafe-angular-selectors<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> npm package. Import the <code>AngularJSSelector</code> method to look for DOM elements by their Angular binding.</p>\r\n<p>For more information, refer to the <a href=\"https://github.com/DevExpress/testcafe-angular-selectors/blob/master/angularJS-selector.md\" target=\"_blank\">official plugin documentation<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>.</p>\r\n<pre><code class=\"lang-js\">import { AngularJSSelector } from &#39;testcafe-angular-selectors&#39;;\r\nimport { Selector } from &#39;testcafe&#39;;\r\n\r\nfixture `TestFixture`\r\n    .page(&#39;http://todomvc.com/examples/angularjs/&#39;);\r\n\r\ntest(&#39;add new item&#39;, async t =&gt; {\r\n    await t\r\n        .typeText(AngularJSSelector.byModel(&#39;newTodo&#39;), &#39;new item&#39;)\r\n        .pressKey(&#39;enter&#39;)\r\n        .expect(Selector(&#39;#todo-list&#39;).visible).ok();\r\n});\r\n</code></pre><h3 id=\"vue__$\"><a class=\"anchor-fix\" href=\"#vue\" id=\"vue\"></a>Vue<a class=\"anchor-hash\" href=\"#vue\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Install the <a href=\"https://github.com/DevExpress/testcafe-vue-selectors\" target=\"_blank\">testcafe-vue-selectors<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> npm package.</p>\r\n<p>Import the <code>VueSelector</code> method to reference Vue components by name.</p>\r\n<p>For more information, refer to the <a href=\"https://github.com/DevExpress/testcafe-vue-selectors/blob/master/README.md\" target=\"_blank\">official plugin documentation<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>.</p>\r\n<pre><code class=\"lang-js\">import VueSelector from &#39;testcafe-vue-selectors&#39;;\r\n\r\nconst rootVue   = VueSelector();\r\nconst vueComponent      = VueSelector(&#39;componentTag&#39;);\r\nconst vueComponentState = await vueComponent.getVue();\r\n\r\n// &gt;&gt; vueComponentState\r\n//\r\n// {\r\n//     props:    &lt;component_props&gt;,\r\n//     state:    &lt;component_state&gt;,\r\n//     computed: &lt;component_computed&gt;\r\n// }\r\n</code></pre><h3 id=\"aurelia__$\"><a class=\"anchor-fix\" href=\"#aurelia\" id=\"aurelia\"></a>Aurelia<a class=\"anchor-hash\" href=\"#aurelia\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Install the <a href=\"https://github.com/DevExpress/testcafe-aurelia-selectors\" target=\"_blank\">testcafe-aurelia-selectors<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> plugin.</p>\r\n<p>Import the <code>AureliaSelector</code> method to look for elements by their Aurelia binding.</p>\r\n<p>For more information, refer to the <a href=\"https://github.com/DevExpress/testcafe-aurelia-selectors/blob/master/README.md\" target=\"_blank\">official plugin documentation<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>.</p>\r\n<pre><code class=\"lang-js\">import AureliaSelector from &#39;testcafe-aurelia-selectors&#39;;\r\n\r\nfixture `TestFixture`\r\n    .page(&#39;http://todomvc.com/examples/aurelia/&#39;);\r\n\r\ntest(&#39;add new item&#39;, async t =&gt; {\r\n    await t\r\n        .typeText(AureliaSelector.byValueBind(&#39;newTodoTitle&#39;), &#39;new item&#39;)\r\n        .pressKey(&#39;enter&#39;)\r\n        .expect(AureliaSelector.byShowBind(&#39;items.length&#39;).exists).ok();\r\n});\r\n</code></pre><h2 id=\"reuse-element-selectors__$\"><a class=\"anchor-fix\" href=\"#reuse-element-selectors\" id=\"reuse-element-selectors\"></a>Reuse Element Selectors<a class=\"anchor-hash\" href=\"#reuse-element-selectors\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Tests that repeat identical Selector queries are slower and harder to maintain. You can reuse Selectors in one of the two ways:</p>\r\n<p>Assign the value of a Selector query to a constant, and use that constant later in code. Every time you invoke this constant, you execute the Selector query anew.</p>\r\n<pre><code class=\"lang-js\">const myBeautifulSelector = Selector(&#39;div&#39;).withText(&#39;hello world&#39;); // does not execute the query\r\n&lt;…&gt;\r\nawait t.click(myBeautifulSelector); // executes the query\r\n</code></pre><p>Selector queries take time to resolve. Await the Selector to execute the query once and only re-use its <a class=\"xref\" href=\"/documentation/402670/reference/test-api/domnodestate\">return value</a>.</p>\r\n<pre><code class=\"lang-js\">const myBeautifulSelector = await Selector(&#39;div&#39;).withText(&#39;hello world&#39;); // executes the query\r\n&lt;…&gt;\r\nawait t.click(myBeautifulSelector); // uses the query result from before\r\n</code></pre><h2 id=\"selector-limitations__$\"><a class=\"anchor-fix\" href=\"#selector-limitations\" id=\"selector-limitations\"></a>Selector Limitations<a class=\"anchor-hash\" href=\"#selector-limitations\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<ul>\r\n<li>Selector queries cannot access user variables outside of their scope. If a Selector query needs to access a variable, pass that variable through the <a class=\"xref\" href=\"/documentation/402756/reference/test-api/selector/constructor#optionsdependencies\">dependency</a> option.</li>\r\n<li>Keyword-based Selectors and Selector-based Selectors do not accept custom arguments. Use the <a class=\"xref\" href=\"/documentation/402756/reference/test-api/selector/constructor#optionsdependencies\">dependencies</a> option to pass additional data to a Selector query.</li>\r\n<li><a href=\"#function-based-selectors\">Function-based Selectors</a> can not contain generators or <code>async/await</code> keywords.</li>\r\n<li>Selector <a class=\"xref\" href=\"/documentation/402789/reference/test-api/clientfunction/constructor#optionsdependencies\">dependencies</a> do not support <a href=\"http://es6-features.org/#PropertyShorthand\" target=\"_blank\">property shorthands<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>.</li>\r\n</ul>\r\n<h2 id=\"access-the-shadow-dom__$\"><a class=\"anchor-fix\" href=\"#access-the-shadow-dom\" id=\"access-the-shadow-dom\"></a>Access the Shadow DOM<a class=\"anchor-hash\" href=\"#access-the-shadow-dom\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<div class=\"IMPORTANT\"><p class=\"alert-title\">Important</p><p>When TestCafe uses <a class=\"xref\" href=\"/documentation/404237/guides/intermediate-guides/native-automation-mode\">native automation</a> to interact with the Shadow DOM, the mouse cursor is not visible.</p>\r\n</div>\r\n<p>You cannot access Shadow DOM elements directly. To interact with the Shadow DOM, <a class=\"xref\" href=\"/documentation/402745/reference/test-api/selector/shadowroot\">identify</a> the root node of a shadow tree, and use other Selector methods to traverse it.</p>\r\n<div class=\"TIP\"><p class=\"alert-title\">Tip</p><p><strong>Reuse</strong> shadowRoot Selector queries for greater convenience.</p>\r\n</div>\r\n<div class=\"WARNING\"><p class=\"alert-title\">Warning</p><p>You cannot perform actions with the <code>shadowRoot()</code> element, or use it in assertions. Use this element as the shadow DOM entry point.</p>\r\n</div>\r\n<p>The following example returns the <code>&lt;p&gt;</code> element from the shadow DOM:</p>\r\n<pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\r\n\r\nfixture`Selector.shadowRoot`\r\n    .page`https://devexpress.github.io/testcafe/example/`;\r\n\r\ntest(&#39;Get text within shadow tree&#39;, async t =&gt; {\r\n    const shadowRoot = Selector(&#39;div&#39;).withAttribute(&#39;id&#39;, &#39;shadow-host&#39;).shadowRoot();\r\n    const paragraph  = shadowRoot.child(&#39;p&#39;);\r\n\r\n    await t.expect(paragraph.textContent).eql(&#39;This paragraph is in the shadow tree&#39;);\r\n\r\n    try {\r\n        await t.click(shadowRoot);\r\n        // causes an error\r\n        // do not target the shadow root directly or use it in assertions\r\n    }\r\n    catch (error) {\r\n        await t.expect(error.code).eql(&#39;E27&#39;);\r\n    }\r\n});\r\n</code></pre><h2 id=\"debug-selectors__$\"><a class=\"anchor-fix\" href=\"#debug-selectors\" id=\"debug-selectors\"></a>Debug Selectors<a class=\"anchor-hash\" href=\"#debug-selectors\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<blockquote><p>Main article: <a class=\"xref\" href=\"/documentation/402835/guides/basic-guides/debug-tests\">Debug Tests</a></p>\r\n</blockquote>\r\n<p>If a Selector or a <a href=\"#selector-methods\">Selector method</a> does not match any DOM elements, the test fails and TestCafe throws an error.</p>\r\n<p>If you chain multiple Selector methods together, TestCafe stops Selector execution after the first unsuccessful Selector method.</p>\r\n<p><img src=\"/images/selector-error.png\" alt=\"Selector Error Screenshot\"></p>\r\n<p>Use the <a class=\"xref\" href=\"/documentation/404288/guides/intermediate-guides/visual-selector-debugger\">Visual Selector Debugger</a> to debug failing Selector queries.</p>\r\n<p><img src=\"/images/inspector/enter-query.gif\" alt=\"Enter a Selector query\"></p>\r\n<h2 id=\"further-reading__$\"><a class=\"anchor-fix\" href=\"#further-reading\" id=\"further-reading\"></a>Further Reading<a class=\"anchor-hash\" href=\"#further-reading\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Read the <a class=\"xref\" href=\"/documentation/402836/guides/best-practices/best-practices\">Best Practices</a> guide for more information on Selector best practices.</p>\r\n<p>The <a class=\"xref\" href=\"/documentation/403655/guides/advanced-guides/advanced-selector-techniques\">Advanced Selector Techniques</a> guide describes the following advanced Selector techniques:</p>\r\n<ul>\r\n<li><a class=\"xref\" href=\"/documentation/403655/guides/advanced-guides/advanced-selector-techniques#extend-the-selector-class\">Extend the Selector class with Custom Properties and Methods</a></li>\r\n<li><a class=\"xref\" href=\"/documentation/403655/guides/advanced-guides/advanced-selector-techniques#execute-selectors-inside-nodejs-callbacks\">Execute Selectors inside Node.JS Callbacks</a></li>\r\n<li><a class=\"xref\" href=\"/documentation/403655/guides/advanced-guides/advanced-selector-techniques#select-elements-with-dynamic-ids\">Select Elements with Dynamic IDs</a></li>\r\n</ul>\r\n<p>The <a class=\"xref\" href=\"/documentation/403654/recipes/basics/selector-recipes\">Selector Recipes</a> page features additional Selector code examples.</p>\r\n","headers":[{"title":"Article Summary","tagName":"h2","id":"article-summary","lvl":2},{"title":"Table of Contents","tagName":"h2","id":"table-of-contents","lvl":2},{"title":"Introduction","tagName":"h2","id":"introduction","lvl":2},{"title":"Element Selector Basics","tagName":"h2","id":"element-selector-basics","lvl":2},{"title":"How Selectors Work","tagName":"h2","id":"how-selectors-work","lvl":2},{"title":"Selector Types","tagName":"h2","id":"selector-types","lvl":2},{"title":"Keyword-Based Selectors","tagName":"h2","id":"keyword-based-selectors","lvl":2},{"title":"Function-based Selectors","tagName":"h2","id":"function-based-selectors","lvl":2},{"title":"Selector-Based Selectors","tagName":"h2","id":"selector-based-selectors","lvl":2},{"title":"Selector Options","tagName":"h2","id":"selector-options","lvl":2},{"title":"Selector Methods","tagName":"h2","id":"selector-methods","lvl":2},{"title":"Framework-Specific Selectors","tagName":"h2","id":"framework-specific-selectors","lvl":2},{"title":"Reuse Element Selectors","tagName":"h2","id":"reuse-element-selectors","lvl":2},{"title":"Selector Limitations","tagName":"h2","id":"selector-limitations","lvl":2},{"title":"Access the Shadow DOM","tagName":"h2","id":"access-the-shadow-dom","lvl":2},{"title":"Debug Selectors","tagName":"h2","id":"debug-selectors","lvl":2},{"title":"Further Reading","tagName":"h2","id":"further-reading","lvl":2}],"title":"Element Selectors","schema":null,"author":null,"preview":null,"description":null,"published":null},"topicUid":"402829","headerNav":{"items":[{"name":"TestCafe Studio","id":"TestCafe Studio"},{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started","items":[]},{"name":"API","id":"402632","url":"/documentation/402632/api","items":[]},{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes","items":[]},{"name":"Examples","id":"402637","url":"/documentation/402637/examples"},{"name":"FAQ","id":"403936","url":"/documentation/403936/faq","headerUrl":"/documentation/402636/faq/general-info","items":[]},{"name":"What's New","id":"What's New","url":"/release-notes","href":"/release-notes","items":[]},{"name":"Dashboard Alpha","id":"Dashboard Alpha","items":[]},{"name":"Support","id":"Support","url":"/support","href":"/support"}],"activeItems":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Basic Guides","id":"402634/Basic Guides"},{"name":"Element Selectors","id":"402829","url":"/documentation/402829/guides/basic-guides/element-selectors"}]},"sidebarNav":{"root":{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},"items":[{"name":"Overview","id":"402634/Overview","items":[{"name":"Getting Started","id":"402635","url":"/documentation/402635/guides/overview/getting-started"},{"name":"Why TestCafe?","id":"402631","url":"/documentation/402631/guides/overview/why-testcafe"}]},{"name":"Basic Guides","id":"402634/Basic Guides","items":[{"name":"Install TestCafe","id":"402834","url":"/documentation/402834/guides/basic-guides/install-testcafe"},{"name":"Test Structure","id":"402831","url":"/documentation/402831/guides/basic-guides/test-structure"},{"name":"Element Selectors","id":"402829","url":"/documentation/402829/guides/basic-guides/element-selectors"},{"name":"Test Actions","id":"402833","url":"/documentation/402833/guides/basic-guides/test-actions"},{"name":"Assertions","id":"402837","url":"/documentation/402837/guides/basic-guides/assertions"},{"name":"Client Functions","id":"402832","url":"/documentation/402832/guides/basic-guides/client-functions"},{"name":"Run Tests","id":"402830","url":"/documentation/402830/guides/basic-guides/run-tests"},{"name":"Debug Tests","id":"402835","url":"/documentation/402835/guides/basic-guides/debug-tests"}]},{"name":"Best Practices","id":"402634/Best Practices","items":[{"name":"Best Practices","id":"402836","url":"/documentation/402836/guides/best-practices/best-practices"},{"name":"Speed Up Test Execution","id":"402963","url":"/documentation/402963/guides/best-practices/speed-up-test-execution"},{"name":"Page Model","id":"402826","url":"/documentation/402826/guides/best-practices/page-model"},{"name":"Bootstrap your TestCafe project with create-testcafe","id":"404259","url":"/documentation/404259/guides/best-practices/create-testcafe"}]},{"name":"Intermediate Guides","id":"402634/Intermediate Guides","items":[{"name":"Native Automation FAQ","id":"404237","url":"/documentation/404237/guides/intermediate-guides/native-automation-mode"},{"name":"Browsers","id":"402828","url":"/documentation/402828/guides/intermediate-guides/browsers"},{"name":"Mobile Devices, Cloud Browsers and Emulation","id":"403584","url":"/documentation/403584/guides/intermediate-guides/mobile-devices-cloud-browsers-and-emulation"},{"name":"Visual Selector Debugger","id":"404288","url":"/documentation/404288/guides/intermediate-guides/visual-selector-debugger"},{"name":"Run Tests Concurrently","id":"403626","url":"/documentation/403626/guides/intermediate-guides/run-tests-concurrently"},{"name":"Reporters","id":"402825","url":"/documentation/402825/guides/intermediate-guides/reporters"},{"name":"TypeScript and CoffeeScript","id":"402824","url":"/documentation/402824/guides/intermediate-guides/typescript-and-coffeescript"},{"name":"Authentication and Roles","id":"402845","url":"/documentation/402845/guides/intermediate-guides/authentication"},{"name":"Screenshots and Videos","id":"402840","url":"/documentation/402840/guides/intermediate-guides/screenshots-and-videos"},{"name":"API Testing","id":"403971","url":"/documentation/403971/guides/intermediate-guides/api-testing"},{"name":"Hooks","id":"403435","url":"/documentation/403435/guides/intermediate-guides/hooks"},{"name":"Quarantine Mode","id":"403841","url":"/documentation/403841/guides/intermediate-guides/quarantine-mode"},{"name":"Live Mode","id":"403842","url":"/documentation/403842/guides/intermediate-guides/live-mode"},{"name":"Intercept HTTP Requests","id":"402842","url":"/documentation/402842/guides/intermediate-guides/intercept-http-requests"},{"name":"Metadata and Filtering","id":"403436","url":"/documentation/403436/guides/intermediate-guides/metadata-and-filtering"},{"name":"Multiple Browser Windows","id":"402841","url":"/documentation/402841/guides/intermediate-guides/multiple-browser-windows"}]},{"name":"Advanced Guides","id":"402634/Advanced Guides","items":[{"name":"Advanced Selector Techniques","id":"403655","url":"/documentation/403655/guides/advanced-guides/advanced-selector-techniques"},{"name":"Inject Client Scripts","id":"402843","url":"/documentation/402843/guides/advanced-guides/inject-client-scripts"},{"name":"ESM Module Support","id":"404258","url":"/documentation/404258/guides/advanced-guides/esm-module-support"},{"name":"Create Custom Test Actions","id":"404150","url":"/documentation/404150/guides/advanced-guides/custom-test-actions"},{"name":"Fire DOM Events","id":"403219","url":"/documentation/403219/guides/advanced-guides/fire-dom-events"},{"name":"Execute Shell Commands on Startup","id":"403849","url":"/documentation/403849/guides/advanced-guides/execute-shell-commands-on-startup"},{"name":"Test HTTPS Features and HTTP/2 Websites","id":"402839","url":"/documentation/402839/guides/advanced-guides/test-https-features-and-http2-websites"},{"name":"Modify Reporter Output","id":"404388","url":"/documentation/404388/guides/advanced-guides/modify-reporter-output"},{"name":"Detect the Client Browser and Platform","id":"402844","url":"/documentation/402844/guides/advanced-guides/detect-the-client-browser-and-platform"},{"name":"Use the TestCafe Docker Image","id":"402838","url":"/documentation/402838/guides/advanced-guides/use-testcafe-docker-image"},{"name":"Built-In Wait Mechanisms","id":"402827","url":"/documentation/402827/guides/advanced-guides/built-in-wait-mechanisms"},{"name":"Replay Chrome User Flow Recordings","id":"403998","url":"/documentation/403998/guides/advanced-guides/chrome-replay-support"}]},{"name":"Continuous Integration","id":"402809","url":"/documentation/402809/guides/continuous-integration","items":[{"name":"Integrate TestCafe with AppVeyor","id":"402823","url":"/documentation/402823/guides/continuous-integration/appveyor"},{"name":"Integrate TestCafe with Azure DevOps","id":"402822","url":"/documentation/402822/guides/continuous-integration/azure-devops"},{"name":"Run Tests in Bitbucket Pipelines","id":"402821","url":"/documentation/402821/guides/continuous-integration/bitbucket-pipelines"},{"name":"Integrate TestCafe With CircleCI","id":"402819","url":"/documentation/402819/guides/continuous-integration/circleci"},{"name":"Run Tests on LambdaTest with CircleCI","id":"402820","url":"/documentation/402820/guides/continuous-integration/circleci-and-lambdatest"},{"name":"Integrate TestCafe with GitHub Actions","id":"402817","url":"/documentation/402817/guides/continuous-integration/github-actions"},{"name":"Run Tests on BrowserStack with GitHub Actions","id":"402818","url":"/documentation/402818/guides/continuous-integration/github-actions-and-browserstack"},{"name":"Integrate TestCafe with GitLab","id":"402816","url":"/documentation/402816/guides/continuous-integration/gitlab"},{"name":"Integrate TestCafe with Jenkins","id":"402815","url":"/documentation/402815/guides/continuous-integration/jenkins"},{"name":"Integrate TestCafe with TeamCity","id":"402847","url":"/documentation/402847/guides/continuous-integration/teamcity"},{"name":"Run Tests in Travis CI","id":"402813","url":"/documentation/402813/guides/continuous-integration/travis"},{"name":"Run Tests on Sauce Labs with Travis CI","id":"402814","url":"/documentation/402814/guides/continuous-integration/travis-and-sauce-labs"}]},{"name":"Extend TestCafe","id":"402634/Extend TestCafe","items":[{"name":"Install Plugins","id":"402811","url":"/documentation/402811/guides/extend-testcafe/install-plugins"},{"name":"Reporter Plugin","id":"402810","url":"/documentation/402810/guides/extend-testcafe/reporter-plugin"},{"name":"Browser Provider Plugin","id":"402812","url":"/documentation/402812/guides/extend-testcafe/browser-provider-plugin"}]}],"activeItems":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Basic Guides","id":"402634/Basic Guides"},{"name":"Element Selectors","id":"402829","url":"/documentation/402829/guides/basic-guides/element-selectors"}],"showLeafs":true},"breadcrumbsNav":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Basic Guides","id":"402634/Basic Guides"},{"name":"Element Selectors","id":"402829","url":"/documentation/402829/guides/basic-guides/element-selectors"}],"publishDates":{"teamBlog":[1687305600000,1667260800000,1661904000000,1657584000000,1637107200000,1633564800000,1632268800000,1626220800000,1612828800000,1609113600000,1607644800000,1605657600000,1605571200000,1600905600000,1599091200000,1598400000000,1597968000000,1597795200000,1595980800000,1594684800000,1593475200000,1590364800000,1587340800000],"releaseNotes}},"__N_SSG":true}