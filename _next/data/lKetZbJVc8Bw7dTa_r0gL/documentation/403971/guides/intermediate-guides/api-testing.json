{"pageProps":{"content":{"html":"        <h1>API Testing</h1>\r\n\r\n<p>TestCafe includes a comprehensive set of server-side API testing tools. You can add dedicated API tests to your test suite, or include API testing methods in existing functional tests.</p>\r\n<p>The inclusion of API tests or checks significantly increases your test coverage, and allows you test your application’s server-side components right alongside its client side.</p>\r\n<p>You can use the <code>t.request</code> method to do the following:</p>\r\n<ul>\r\n<li>Send requests to your application’s web server to prepare the testing environment;</li>\r\n<li>Send requests to your application’s web server to verify the success of post-test cleanup.</li>\r\n</ul>\r\n<p>The <code>request</code> method requires access to the <a class=\"xref\" href=\"/documentation/402665/reference/test-api/testcontroller\">TestController</a> object. You cannot chain this method with other TestController methods.</p>\r\n<h2 id=\"how-api-testing-works__$\"><a class=\"anchor-fix\" href=\"#how-api-testing-works\" id=\"how-api-testing-works\"></a>How API testing works<a class=\"anchor-hash\" href=\"#how-api-testing-works\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>API tests send HTTP requests to the server and compare the server’s responses to the expected outcome.</p>\r\n<p>Use the <code>request</code> method to <a href=\"#send-http-requests\">send HTTP requests</a>. Use assertions to <a href=\"#observe-http-responses\">verify HTTP responses</a>.</p>\r\n<h2 id=\"quick-guide__$\"><a class=\"anchor-fix\" href=\"#quick-guide\" id=\"quick-guide\"></a>Quick Guide<a class=\"anchor-hash\" href=\"#quick-guide\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<ol>\r\n<li><p>API tests do not need page access. You can omit the URL when you define the fixture.</p>\r\n<pre><code class=\"lang-js\">    fixture`request`;\r\n</code></pre></li>\r\n<li><p>Declare a new test. Asynchronously call the <code>request</code> method from the test body. Save the results to an object.</p>\r\n<pre><code class=\"lang-js\">    const results = await t.request(`http://localhost:3000/api/data`);\r\n</code></pre></li>\r\n<li><p>Use assertions to check the object’s properties.</p>\r\n<pre><code class=\"lang-js\">await t\r\n        .expect(results.status).eql(200)\r\n        .expect(results.statusText).eql(&#39;OK&#39;)\r\n        .expect(results.headers).contains({ &#39;content-type&#39;: &#39;application/json; charset=utf-8&#39; })\r\n        .expect(results.body.data).eql({\r\n            name:     &#39;John Hearts&#39;,\r\n            position: &#39;CTO&#39;,\r\n        });\r\n</code></pre></li>\r\n</ol>\r\n<h2 id=\"send-http-requests__$\"><a class=\"anchor-fix\" href=\"#send-http-requests\" id=\"send-http-requests\"></a>Send HTTP Requests<a class=\"anchor-hash\" href=\"#send-http-requests\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>The <code>request</code> method is asynchronous. To send a simple <code>GET</code> request, pass the target URL to the <code>request</code> method:</p>\r\n<pre><code class=\"lang-js\">await t.request(`http://localhost:3000/api/data`);\r\n</code></pre><p>If you want to specify multiple <a href=\"#request-parameters\">request parameters</a>, store them in an object:</p>\r\n<pre><code class=\"lang-js\">await t.request({url: &#39;http://example.com&#39;, method: &#39;head&#39;});\r\n</code></pre><div class=\"IMPORTANT\"><p class=\"alert-title\">Important</p><p>The <code>request</code> method calls trigger your <a class=\"xref\" href=\"/documentation/402842/guides/intermediate-guides/intercept-http-requests\">request hooks</a>.</p>\r\n</div>\r\n<h3 id=\"request-parameters__$\"><a class=\"anchor-fix\" href=\"#request-parameters\" id=\"request-parameters\"></a>Request Parameters<a class=\"anchor-hash\" href=\"#request-parameters\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>You can specify the following request parameters:</p>\r\n<ul>\r\n<li><a href=\"#specify-the-url\">The target URL</a> - mandatory</li>\r\n<li><a href=\"#specify-the-http-method\">The HTTP method</a></li>\r\n<li><a href=\"#request-body\">The request body</a></li>\r\n<li><a href=\"#url-query-parameters\">URL query parameters</a> </li>\r\n<li><a href=\"#receive-credentials\">Receive credentials?</a></li>\r\n<li><a href=\"#http-authentication\">Basic HTTP authentication credentials</a></li>\r\n<li><a href=\"#request-headers\">Request headers</a></li>\r\n<li><a href=\"#request-timeout\">Request timeout</a></li>\r\n<li><a href=\"#proxy-settings\">Proxy settings</a></li>\r\n<li><a href=\"#response-format\">Response format</a></li>\r\n</ul>\r\n<h3 id=\"specify-the-url__$\"><a class=\"anchor-fix\" href=\"#specify-the-url\" id=\"specify-the-url\"></a>Specify the URL<a class=\"anchor-hash\" href=\"#specify-the-url\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Every HTTP request needs a target URL. The target URL can be either absolute or relative. If you specify a <em>relative</em> URL, TestCafe calculates the absolute URL in relation to the current page.</p>\r\n<p>There are two ways to specify the target URL.</p>\r\n<ul>\r\n<li><p>You can pass the URL string directly to the <code>request</code> method:</p>\r\n<pre><code class=\"lang-js\">await t.request(`http://localhost:3000/api/data`);\r\n</code></pre></li>\r\n<li><p>Alternatively, use the <code>url</code> <a class=\"xref\" href=\"/documentation/403981/reference/test-api/testcontroller/request#options\">option</a>:</p>\r\n<pre><code class=\"lang-js\">await t.request({\r\n    url: &#39;http://localhost:3000/api/data&#39;\r\n});\r\n</code></pre></li>\r\n</ul>\r\n<p>If you define both, the first argument takes priority:</p>\r\n<pre><code class=\"lang-js\">await t.request(`http://localhost:3000/api/1`, {url: &#39;http://localhost:3000/api/2&#39;}); // sends a request to /api/1\r\n</code></pre><h3 id=\"specify-the-http-method__$\"><a class=\"anchor-fix\" href=\"#specify-the-http-method\" id=\"specify-the-http-method\"></a>Specify the HTTP Method<a class=\"anchor-hash\" href=\"#specify-the-http-method\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<div class=\"NOTE\"><p class=\"alert-title\">Note</p><p>The <code>request</code> method does not support CORS.</p>\r\n</div>\r\n<p>Your requests can use any <a href=\"https://www.rfc-editor.org/rfc/rfc9110.html#name-methods\" target=\"_blank\">standard HTTP protocol method<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>. If you don’t specify the HTTP method, the <code>request</code> method sends a <code>GET</code> request.</p>\r\n<p>You can specify the HTTP method with the <code>method</code> property:</p>\r\n<pre><code class=\"lang-js\">await t.request({\r\n    url: &#39;http://localhost:3000/api/data&#39;,\r\n    method: &#39;head&#39;\r\n});\r\n</code></pre><p>Alternatively, you can append <a class=\"xref\" href=\"/documentation/403981/reference/test-api/testcontroller/request#methods\">select HTTP methods</a> to the <code>request</code> method itself:</p>\r\n<pre><code class=\"lang-js\">await t.request.head({\r\n    url: &#39;http://localhost:3000/api/data&#39;\r\n});\r\n</code></pre><h3 id=\"request-body__$\"><a class=\"anchor-fix\" href=\"#request-body\" id=\"request-body\"></a>Request Body<a class=\"anchor-hash\" href=\"#request-body\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Use the <code>body</code> option to specify request body.</p>\r\n<pre><code class=\"lang-js\">await t.request.patch({\r\n    url: &#39;http://localhost:3000/api/data&#39;, \r\n    body: {name: &#39;Jane Doe&#39;, position: &#39;CTO&#39;}\r\n});\r\n</code></pre><h3 id=\"url-query-parameters__$\"><a class=\"anchor-fix\" href=\"#url-query-parameters\" id=\"url-query-parameters\"></a>URL Query Parameters<a class=\"anchor-hash\" href=\"#url-query-parameters\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Use the <code>params</code> option to specify URL query parameters. Make sure your parameters meet the requirements of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\" target=\"_blank\">URLSearchParams API<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>.</p>\r\n<pre><code class=\"lang-js\">await t.request.patch({\r\n    url: &#39;http://localhost:3000/api/data&#39;, \r\n    params: {\r\n        uid: 503, \r\n        auth: true\r\n    }\r\n});\r\n</code></pre><h3 id=\"receive-credentials__$\"><a class=\"anchor-fix\" href=\"#receive-credentials\" id=\"receive-credentials\"></a>Receive Credentials<a class=\"anchor-hash\" href=\"#receive-credentials\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>withCredentials</code> option determines whether the response should include credentials such as cookies and authorization headers.</p>\r\n<p>The default value of the <code>withCredentials</code> option is <code>false</code>. If you enable the <code>withCredentials</code> option, TestCafe <em>applies</em> the credentials that it receives to the current page.</p>\r\n<p>Do not enable the <code>withCredentials</code> option for same-origin requests.</p>\r\n<pre><code class=\"lang-js\">await t.request({\r\n    url: &#39;http://localhost:3000/api/data&#39;, \r\n    withCredentials: true\r\n});\r\n</code></pre><h3 id=\"http-authentication__$\"><a class=\"anchor-fix\" href=\"#http-authentication\" id=\"http-authentication\"></a>HTTP Authentication<a class=\"anchor-hash\" href=\"#http-authentication\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>auth</code> option enables <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication\" target=\"_blank\">Basic HTTP Authentication<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a>. It accepts two arguments — the username and the password.</p>\r\n<pre><code class=\"lang-js\">await t.request({\r\n    url: &#39;http://localhost:3000/api/data&#39;, \r\n    auth: {\r\n        username: &#39;admin&#39;, \r\n        password: &#39;1234&#39;\r\n    }\r\n});\r\n</code></pre><h3 id=\"request-headers__$\"><a class=\"anchor-fix\" href=\"#request-headers\" id=\"request-headers\"></a>Request Headers<a class=\"anchor-hash\" href=\"#request-headers\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>headers</code> option specifies request headers.</p>\r\n<pre><code class=\"lang-js\">await t.request({\r\n    url: &#39;http://localhost:3000/api/data&#39;, \r\n    headers: {\r\n        &quot;Accept&quot;: &quot;text/html&quot;\r\n    }\r\n});\r\n</code></pre><h3 id=\"request-timeout__$\"><a class=\"anchor-fix\" href=\"#request-timeout\" id=\"request-timeout\"></a>Request Timeout<a class=\"anchor-hash\" href=\"#request-timeout\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>timeout</code> option specifies the timeout value in milliseconds. The method fails if the request does not resolve within the timeout window. The default <code>timeout</code> value is 25000 ms.</p>\r\n<pre><code class=\"lang-js\">await t.request({\r\n    url: &#39;http://localhost:3000/api/data&#39;, \r\n    timeout: 40000\r\n});\r\n</code></pre><h3 id=\"proxy-settings__$\"><a class=\"anchor-fix\" href=\"#proxy-settings\" id=\"proxy-settings\"></a>Proxy Settings<a class=\"anchor-hash\" href=\"#proxy-settings\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>proxy</code> option specifies proxy settings. </p>\r\n<pre><code class=\"lang-js\">await t.request({\r\n    url: &#39;http://localhost:3000/api/data&#39;, \r\n    proxy: {\r\n        protocol: &#39;http&#39;,    \r\n        host: &#39;http://www.proxy.com&#39;,\r\n        port: 3200,\r\n        auth: {\r\n            username: &#39;proxyUser22&#39;,\r\n            password: &#39;12345&#39;\r\n        };\r\n    }\r\n});\r\n</code></pre><h3 id=\"response-format__$\"><a class=\"anchor-fix\" href=\"#response-format\" id=\"response-format\"></a>Response Format<a class=\"anchor-hash\" href=\"#response-format\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>TestCafe <strong>formats</strong> the body of the response for easier parsing (see <a href=\"#response-body\">Observe Response Body</a>). To receive <strong>raw</strong> response data, enable the <code>rawResponse</code> option:</p>\r\n<pre><code class=\"lang-js\">await t.request({\r\n    url: &#39;http://localhost:3000/api/data&#39;, \r\n    rawResponse: true\r\n});\r\n</code></pre><p>The default value of <code>rawResponse</code> is <code>false</code>.</p>\r\n<h2 id=\"observe-http-responses__$\"><a class=\"anchor-fix\" href=\"#observe-http-responses\" id=\"observe-http-responses\"></a>Observe HTTP Responses<a class=\"anchor-hash\" href=\"#observe-http-responses\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>The <code>request</code> method returns an object with the following properties:</p>\r\n<ul>\r\n<li><a href=\"#response-status\">status</a></li>\r\n<li><a href=\"#response-status-text\">statusText</a></li>\r\n<li><a href=\"#response-headers\">headers</a></li>\r\n<li><a href=\"#response-body\">body</a></li>\r\n</ul>\r\n<p>You can examine the HTTP response in one of two ways:</p>\r\n<ul>\r\n<li>Execute the <code>request</code> method <a href=\"#execute-a-request-inside-an-assertion\">inside an assertion</a>;</li>\r\n<li><a href=\"#save-the-return-value\">Save the return value</a> of the <code>request</code> method.</li>\r\n</ul>\r\n<h3 id=\"execute-a-request-inside-an-assertion__$\"><a class=\"anchor-fix\" href=\"#execute-a-request-inside-an-assertion\" id=\"execute-a-request-inside-an-assertion\"></a>Execute a request inside an assertion<a class=\"anchor-hash\" href=\"#execute-a-request-inside-an-assertion\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>If you pass the <code>t.request</code> method to an assertion, the method becomes subject to the <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions#smart-assertion-query-mechanism\">Smart Assertion Query Mechanism</a>. If your request fails, TestCafe repeats it within the assertion timeout until the request succeeds.</p>\r\n<pre><code class=\"lang-js\">await t.expect(t.request(`http://localhost:3000/helloworld`).body).contains(&#39;Hello World&#39;) // true\r\n\r\nawait t.expect(t.request.post({url: `http://localhost:3000/user`, timeout: 30000}).status).eql(200, &#39;ok posting&#39;, {timeout: 50000}) // true\r\n</code></pre><h3 id=\"save-the-return-value__$\"><a class=\"anchor-fix\" href=\"#save-the-return-value\" id=\"save-the-return-value\"></a>Save the return value<a class=\"anchor-hash\" href=\"#save-the-return-value\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>Alternatively, you can save the return value of the <code>request</code> method and use assertions later on in the test.</p>\r\n<pre><code class=\"lang-js\">const response = await t.request(`http://localhost:3000/helloworld`);\r\nconsole.log(response.body) // &#39;Hello World&#39;\r\nt.expect(response.body).contains(&#39;Hello World&#39;) // true\r\n</code></pre><p>If you only need to examine a single property, you can append the name of the property to the request method:</p>\r\n<pre><code class=\"lang-js\">const responseBody = await t.request(`http://localhost:3000/helloworld`).body;\r\nconsole.log(responseBody) // &#39;Hello World&#39;\r\nt.expect(responseBody).contains(&#39;Hello World&#39;) // true\r\n</code></pre><h3 id=\"response-status__$\"><a class=\"anchor-fix\" href=\"#response-status\" id=\"response-status\"></a>Response Status<a class=\"anchor-hash\" href=\"#response-status\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>status</code> property contains the status code of the HTTP response.</p>\r\n<pre><code class=\"lang-js\">const response= await t.request(`http://localhost:3000/helloworld`);\r\nconsole.log(response.status) // &#39;200&#39;\r\n</code></pre><h3 id=\"response-status-text__$\"><a class=\"anchor-fix\" href=\"#response-status-text\" id=\"response-status-text\"></a>Response Status Text<a class=\"anchor-hash\" href=\"#response-status-text\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>statusText</code> property contains the status text of the HTTP response.</p>\r\n<pre><code class=\"lang-js\">const response= await t.request(`http://localhost:3000/helloworld`);\r\nconsole.log(response.statusText) // &#39;OK&#39;\r\n</code></pre><h3 id=\"response-headers__$\"><a class=\"anchor-fix\" href=\"#response-headers\" id=\"response-headers\"></a>Response Headers<a class=\"anchor-hash\" href=\"#response-headers\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>headers</code> property contains the headers of the HTTP response.</p>\r\n<pre><code class=\"lang-js\">const response= await t.request(`http://localhost:3000/helloworld`);\r\nconsole.log(response.headers) // &quot;{&#39;content-type&#39;: &#39;application/json; charset=utf-8&#39;}&quot;\r\n</code></pre><h3 id=\"response-body__$\"><a class=\"anchor-fix\" href=\"#response-body\" id=\"response-body\"></a>Response Body<a class=\"anchor-hash\" href=\"#response-body\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h3>\r\n<p>The <code>responseBody</code> property contains the body of the response. TestCafe <strong>formats</strong> the property for easier parsing.</p>\r\n<ul>\r\n<li>If the <code>content-type</code> of the response is <code>text/html</code> or <code>text/plain</code>, the response body is a <code>String</code>.<pre><code class=\"lang-js\">const responseBody = await t.request(`http://localhost:3000/helloworld`).body;\r\nconsole.log(responseBody) // &#39;Hello World&#39;\r\n</code></pre></li>\r\n<li>If the <code>content-type</code> of the response is <code>application/json</code>, the <code>responseBody</code> property is an <code>Object</code>.<pre><code class=\"lang-js\">const responseBody = await t.request(`http://localhost:3000/json/api`).body;\r\nconsole.log(responseBody) // &#39;{&quot;message&quot;: &quot;Hello World&quot;}&#39;\r\n</code></pre></li>\r\n<li>If the <code>content-type</code> of the response is neither <code>application/json</code> nor <code>text/plain</code>, the <code>responseBody</code> property becomes a <code>Buffer</code>.<pre><code class=\"lang-js\">const responseBody = await t.request(`http://localhost:3000/json/api`).body;\r\nconsole.log(responseBody) // &#39;&lt;Buffer 61 62 63 ... &gt;&#39;\r\n</code></pre></li>\r\n</ul>\r\n<p>If you enable the <a href=\"#response-format\">rawResponse option</a>, TestCafe does not format the <code>responseBody</code> property.</p>\r\n<h2 id=\"limitations__$\"><a class=\"anchor-fix\" href=\"#limitations\" id=\"limitations\"></a>Limitations<a class=\"anchor-hash\" href=\"#limitations\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<ul>\r\n<li>The <code>request</code> method does not support CORS. </li>\r\n<li>The <code>request</code> method is a server-side method. TestCafe executes it within a Node.JS environment. You cannot debug it in the browser’s <strong>Network</strong> tab.</li>\r\n</ul>\r\n","headers":[{"title":"How API testing works","tagName":"h2","id":"how-api-testing-works","lvl":2},{"title":"Quick Guide","tagName":"h2","id":"quick-guide","lvl":2},{"title":"Send HTTP Requests","tagName":"h2","id":"send-http-requests","lvl":2},{"title":"Observe HTTP Responses","tagName":"h2","id":"observe-http-responses","lvl":2},{"title":"Limitations","tagName":"h2","id":"limitations","lvl":2}],"title":"API Testing","schema":null,"author":null,"preview":null,"description":null,"published":null},"topicUid":"403971","headerNav":{"items":[{"name":"TestCafe Studio","id":"TestCafe Studio"},{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started","items":[]},{"name":"API","id":"402632","url":"/documentation/402632/api","items":[]},{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes","items":[]},{"name":"Examples","id":"402637","url":"/documentation/402637/examples"},{"name":"FAQ","id":"403936","url":"/documentation/403936/faq","headerUrl":"/documentation/402636/faq/general-info","items":[]},{"name":"What's New","id":"What's New","url":"/release-notes","href":"/release-notes","items":[]},{"name":"Dashboard Alpha","id":"Dashboard Alpha","items":[]},{"name":"Support","id":"Support","url":"/support","href":"/support"}],"activeItems":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Intermediate Guides","id":"402634/Intermediate Guides"},{"name":"API Testing","id":"403971","url":"/documentation/403971/guides/intermediate-guides/api-testing"}]},"sidebarNav":{"root":{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},"items":[{"name":"Overview","id":"402634/Overview","items":[{"name":"Getting Started","id":"402635","url":"/documentation/402635/guides/overview/getting-started"},{"name":"Why TestCafe?","id":"402631","url":"/documentation/402631/guides/overview/why-testcafe"}]},{"name":"Basic Guides","id":"402634/Basic Guides","items":[{"name":"Install TestCafe","id":"402834","url":"/documentation/402834/guides/basic-guides/install-testcafe"},{"name":"Test Structure","id":"402831","url":"/documentation/402831/guides/basic-guides/test-structure"},{"name":"Element Selectors","id":"402829","url":"/documentation/402829/guides/basic-guides/element-selectors"},{"name":"Test Actions","id":"402833","url":"/documentation/402833/guides/basic-guides/test-actions"},{"name":"Assertions","id":"402837","url":"/documentation/402837/guides/basic-guides/assertions"},{"name":"Client Functions","id":"402832","url":"/documentation/402832/guides/basic-guides/client-functions"},{"name":"Run Tests","id":"402830","url":"/documentation/402830/guides/basic-guides/run-tests"},{"name":"Debug Tests","id":"402835","url":"/documentation/402835/guides/basic-guides/debug-tests"}]},{"name":"Best Practices","id":"402634/Best Practices","items":[{"name":"Best Practices","id":"402836","url":"/documentation/402836/guides/best-practices/best-practices"},{"name":"Speed Up Test Execution","id":"402963","url":"/documentation/402963/guides/best-practices/speed-up-test-execution"},{"name":"Page Model","id":"402826","url":"/documentation/402826/guides/best-practices/page-model"},{"name":"Bootstrap your TestCafe project with create-testcafe","id":"404259","url":"/documentation/404259/guides/best-practices/create-testcafe"}]},{"name":"Intermediate Guides","id":"402634/Intermediate Guides","items":[{"name":"Native Automation FAQ","id":"404237","url":"/documentation/404237/guides/intermediate-guides/native-automation-mode"},{"name":"Browsers","id":"402828","url":"/documentation/402828/guides/intermediate-guides/browsers"},{"name":"Mobile Devices, Cloud Browsers and Emulation","id":"403584","url":"/documentation/403584/guides/intermediate-guides/mobile-devices-cloud-browsers-and-emulation"},{"name":"Visual Selector Debugger","id":"404288","url":"/documentation/404288/guides/intermediate-guides/visual-selector-debugger"},{"name":"Run Tests Concurrently","id":"403626","url":"/documentation/403626/guides/intermediate-guides/run-tests-concurrently"},{"name":"Reporters","id":"402825","url":"/documentation/402825/guides/intermediate-guides/reporters"},{"name":"TypeScript and CoffeeScript","id":"402824","url":"/documentation/402824/guides/intermediate-guides/typescript-and-coffeescript"},{"name":"Authentication and Roles","id":"402845","url":"/documentation/402845/guides/intermediate-guides/authentication"},{"name":"Screenshots and Videos","id":"402840","url":"/documentation/402840/guides/intermediate-guides/screenshots-and-videos"},{"name":"API Testing","id":"403971","url":"/documentation/403971/guides/intermediate-guides/api-testing"},{"name":"Hooks","id":"403435","url":"/documentation/403435/guides/intermediate-guides/hooks"},{"name":"Quarantine Mode","id":"403841","url":"/documentation/403841/guides/intermediate-guides/quarantine-mode"},{"name":"Live Mode","id":"403842","url":"/documentation/403842/guides/intermediate-guides/live-mode"},{"name":"Intercept HTTP Requests","id":"402842","url":"/documentation/402842/guides/intermediate-guides/intercept-http-requests"},{"name":"Metadata and Filtering","id":"403436","url":"/documentation/403436/guides/intermediate-guides/metadata-and-filtering"},{"name":"Multiple Browser Windows","id":"402841","url":"/documentation/402841/guides/intermediate-guides/multiple-browser-windows"}]},{"name":"Advanced Guides","id":"402634/Advanced Guides","items":[{"name":"Advanced Selector Techniques","id":"403655","url":"/documentation/403655/guides/advanced-guides/advanced-selector-techniques"},{"name":"Inject Client Scripts","id":"402843","url":"/documentation/402843/guides/advanced-guides/inject-client-scripts"},{"name":"ESM Module Support","id":"404258","url":"/documentation/404258/guides/advanced-guides/esm-module-support"},{"name":"Create Custom Test Actions","id":"404150","url":"/documentation/404150/guides/advanced-guides/custom-test-actions"},{"name":"Fire DOM Events","id":"403219","url":"/documentation/403219/guides/advanced-guides/fire-dom-events"},{"name":"Execute Shell Commands on Startup","id":"403849","url":"/documentation/403849/guides/advanced-guides/execute-shell-commands-on-startup"},{"name":"Test HTTPS Features and HTTP/2 Websites","id":"402839","url":"/documentation/402839/guides/advanced-guides/test-https-features-and-http2-websites"},{"name":"Modify Reporter Output","id":"404388","url":"/documentation/404388/guides/advanced-guides/modify-reporter-output"},{"name":"Detect the Client Browser and Platform","id":"402844","url":"/documentation/402844/guides/advanced-guides/detect-the-client-browser-and-platform"},{"name":"Use the TestCafe Docker Image","id":"402838","url":"/documentation/402838/guides/advanced-guides/use-testcafe-docker-image"},{"name":"Built-In Wait Mechanisms","id":"402827","url":"/documentation/402827/guides/advanced-guides/built-in-wait-mechanisms"},{"name":"Replay Chrome User Flow Recordings","id":"403998","url":"/documentation/403998/guides/advanced-guides/chrome-replay-support"}]},{"name":"Continuous Integration","id":"402809","url":"/documentation/402809/guides/continuous-integration","items":[{"name":"Integrate TestCafe with AppVeyor","id":"402823","url":"/documentation/402823/guides/continuous-integration/appveyor"},{"name":"Integrate TestCafe with Azure DevOps","id":"402822","url":"/documentation/402822/guides/continuous-integration/azure-devops"},{"name":"Run Tests in Bitbucket Pipelines","id":"402821","url":"/documentation/402821/guides/continuous-integration/bitbucket-pipelines"},{"name":"Integrate TestCafe With CircleCI","id":"402819","url":"/documentation/402819/guides/continuous-integration/circleci"},{"name":"Run Tests on LambdaTest with CircleCI","id":"402820","url":"/documentation/402820/guides/continuous-integration/circleci-and-lambdatest"},{"name":"Integrate TestCafe with GitHub Actions","id":"402817","url":"/documentation/402817/guides/continuous-integration/github-actions"},{"name":"Run Tests on BrowserStack with GitHub Actions","id":"402818","url":"/documentation/402818/guides/continuous-integration/github-actions-and-browserstack"},{"name":"Integrate TestCafe with GitLab","id":"402816","url":"/documentation/402816/guides/continuous-integration/gitlab"},{"name":"Integrate TestCafe with Jenkins","id":"402815","url":"/documentation/402815/guides/continuous-integration/jenkins"},{"name":"Integrate TestCafe with TeamCity","id":"402847","url":"/documentation/402847/guides/continuous-integration/teamcity"},{"name":"Run Tests in Travis CI","id":"402813","url":"/documentation/402813/guides/continuous-integration/travis"},{"name":"Run Tests on Sauce Labs with Travis CI","id":"402814","url":"/documentation/402814/guides/continuous-integration/travis-and-sauce-labs"}]},{"name":"Extend TestCafe","id":"402634/Extend TestCafe","items":[{"name":"Install Plugins","id":"402811","url":"/documentation/402811/guides/extend-testcafe/install-plugins"},{"name":"Reporter Plugin","id":"402810","url":"/documentation/402810/guides/extend-testcafe/reporter-plugin"},{"name":"Browser Provider Plugin","id":"402812","url":"/documentation/402812/guides/extend-testcafe/browser-provider-plugin"}]}],"activeItems":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Intermediate Guides","id":"402634/Intermediate Guides"},{"name":"API Testing","id":"403971","url":"/documentation/403971/guides/intermediate-guides/api-testing"}],"showLeafs":true},"breadcrumbsNav":[{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started"},{"name":"Intermediate Guides","id":"402634/Intermediate Guides"},{"name":"API Testing","id":"403971","url":"/documentation/403971/guides/intermediate-guides/api-testing"}],"publishDates":{"teamBlog":[1687305600000,1667260800000,1661904000000,1657584000000,1637107200000,1633564800000,1632268800000,1626220800000,1612828800000,1609113600000,1607644800000,1605657600000,1605571200000,1600905600000,1599091200000,1598400000000,1597968000000,1597795200000,1595980800000,1594684800000,1593475200000,1590364800000,1587340800000],"releaseNotes}},"__N_SSG":true}