{"pageProps":{"content":{"html":"        <h1>Selector Recipes</h1>\r\n\r\n<p>This article contains code examples for simple Selector use cases.\r\nBefore you read this article, read the <a class=\"xref\" href=\"/documentation/402829/guides/basic-guides/element-selectors\">Selectors guide</a> to learn how Selectors work.</p>\r\n<h2 id=\"use-selectors-in-actions__$\"><a class=\"anchor-fix\" href=\"#use-selectors-in-actions\" id=\"use-selectors-in-actions\"></a>Use Selectors in Actions<a class=\"anchor-hash\" href=\"#use-selectors-in-actions\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Use Selectors to specify targets for <a class=\"xref\" href=\"/documentation/402833/guides/basic-guides/test-actions\">test actions</a>:</p>\r\n<pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\r\n\r\nfixture `My fixture`\r\n    .page `http://devexpress.github.io/testcafe/example/`;\r\n\r\nconst label = Selector(&#39;#tried-section&#39;).child(&#39;label&#39;);\r\n\r\ntest(&#39;My Test&#39;, async t =&gt; {\r\n    await t.click(label);\r\n});\r\n</code></pre><h2 id=\"use-selectors-in-assertions__$\"><a class=\"anchor-fix\" href=\"#use-selectors-in-assertions\" id=\"use-selectors-in-assertions\"></a>Use Selectors in Assertions<a class=\"anchor-hash\" href=\"#use-selectors-in-assertions\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Use Selectors to specify <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions\">assertion</a> targets. Selectors in assertions are subject to the <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions#smart-assertion-query-mechanism\">Smart Assertion Query Mechanism</a>.</p>\r\n<pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\r\n\r\nfixture `My fixture`\r\n    .page `http://devexpress.github.io/testcafe/example/`;\r\n\r\ntest(&#39;Assertion with Selector&#39;, async t =&gt; {\r\n    const developerNameInput = Selector(&#39;#developer-name&#39;);\r\n\r\n    await t\r\n        .expect(developerNameInput.value).eql(&#39;&#39;)\r\n        .typeText(developerNameInput, &#39;Peter&#39;)\r\n        .expect(developerNameInput.value).eql(&#39;Peter&#39;);\r\n});\r\n</code></pre><h2 id=\"use-selectors-to-check-if-an-element-exists__$\"><a class=\"anchor-fix\" href=\"#use-selectors-to-check-if-an-element-exists\" id=\"use-selectors-to-check-if-an-element-exists\"></a>Use Selectors to Check if an Element Exists<a class=\"anchor-hash\" href=\"#use-selectors-to-check-if-an-element-exists\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Use the following properties to check whether your Selector query matches a page element:</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th>Property</th>\r\n<th>Type</th>\r\n<th>Description</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402754/reference/test-api/selector/exists\">exists</a></td>\r\n<td>Boolean</td>\r\n<td><code>true</code> if at least one matching element exists.</td>\r\n</tr>\r\n<tr>\r\n<td><a class=\"xref\" href=\"/documentation/402755/reference/test-api/selector/count\">count</a></td>\r\n<td>Number</td>\r\n<td>The number of matching elements.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>Selector property getters are asynchronous.</p>\r\n<pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\r\n\r\nfixture `Example page`\r\n    .page `http://devexpress.github.io/testcafe/example/`;\r\n\r\ntest(&#39;My test&#39;, async t =&gt; {\r\n    const osCount            = Selector(&#39;.column.col-2 label&#39;).count;\r\n    const submitButtonExists = Selector(&#39;#submit-button&#39;).exists;\r\n\r\n    await t\r\n        .expect(osCount).eql(3)\r\n        .expect(submitButtonExists).ok();\r\n});\r\n</code></pre><p>Conditionals make tests unreliable and unpredictable. A good rule of thumb is to avoid conditionals at all costs. </p>\r\n<p>However, some websites warrant the use of conditionals. If youâ€™re unsure that your action target is visible, you may check its visibility status:</p>\r\n<pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\r\n\r\nfixture `My fixture`\r\n    .page `https://devexpress.github.io/testcafe/example/`;\r\n\r\ntest(&#39;My test&#39;, async t =&gt; {\r\n    const element = Selector(&#39;#developer-name&#39;);\r\n\r\n    if(await element.exists &amp;&amp; await element.visible)\r\n        await t.typeText(element, &#39;Peter Parker&#39;);\r\n\r\n    // ...\r\n});\r\n</code></pre><h2 id=\"examine-dom-elements-dom-node-snapshot__$\"><a class=\"anchor-fix\" href=\"#examine-dom-elements-dom-node-snapshot\" id=\"examine-dom-elements-dom-node-snapshot\"></a>Examine DOM Elements (DOM Node Snapshot)<a class=\"anchor-hash\" href=\"#examine-dom-elements-dom-node-snapshot\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>When you asynchronously execute a Selector query, it returns a <code>DOM Node Snapshot</code> object with the results of the query and their <a class=\"xref\" href=\"/documentation/402670/reference/test-api/domnodestate\">properties</a>. </p>\r\n<p>If a Selector matches several DOM nodes, the query only returns the first matching node.</p>\r\n<p>You can use this object to examine the state of the DOM element: </p>\r\n<pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\r\n\r\nfixture `My fixture`\r\n    .page `http://devexpress.github.io/testcafe/example/`;\r\n\r\ntest(&#39;DOM Node State&#39;, async t =&gt; {\r\n    const sliderHandle         = Selector(&#39;#slider&#39;).child(&#39;span&#39;);\r\n    const sliderHandleSnapshot = await sliderHandle();\r\n\r\n    console.log(sliderHandleSnapshot.hasClass(&#39;ui-slider-handle&#39;));    // =&gt; true\r\n    console.log(sliderHandleSnapshot.childElementCount);               // =&gt; 0\r\n});\r\n</code></pre><p>The DOM Node State API contains methods that let you access the properties of the query result:</p>\r\n<pre><code class=\"lang-js\">const headerText = await Selector(&#39;#header&#39;).textContent;\r\n</code></pre><p>You can save the snapshot to a variable and pass this variable to actions. See <a class=\"xref\" href=\"/documentation/402829/guides/basic-guides/element-selectors#selector-based-selectors\">Selector-based Selectors</a> for more information.</p>\r\n<pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\r\n\r\nfixture `My fixture`\r\n    .page `http://devexpress.github.io/testcafe/example/`;\r\n\r\nconst label = Selector(&#39;#tried-section&#39;).child(&#39;label&#39;);\r\n\r\ntest(&#39;My Test&#39;, async t =&gt; {\r\n    const labelSnapshot = await label();\r\n\r\n    await t.click(labelSnapshot);\r\n});\r\n</code></pre><div class=\"NOTE\"><p class=\"alert-title\">Note</p><p>The <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions#smart-assertion-query-mechanism\">Smart Assertion Query Mechanism</a> does not apply to assertions that examine a <code>DOM Node Snapshot</code>. Pass a Selector query to the assertion to take advantage of the Smart Assertion Query Mechanism.</p>\r\n</div>\r\n<h2 id=\"access-custom-element-properties__$\"><a class=\"anchor-fix\" href=\"#access-custom-element-properties\" id=\"access-custom-element-properties\"></a>Access Custom Element Properties<a class=\"anchor-hash\" href=\"#access-custom-element-properties\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Use the <a class=\"xref\" href=\"/documentation/402759/reference/test-api/selector/addcustomdomproperties\">selector.addCustomDOMProperties</a> Selector method to retrieve custom element properties from the DOM.</p>\r\n<pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\r\n\r\nfixture `My fixture`\r\n    .page `https://example.com`;\r\n\r\ntest(&#39;Check Label HTML&#39;, async t =&gt; {\r\n    const label = Selector(&#39;label&#39;).addCustomDOMProperties({\r\n        innerHTML: el =&gt; el.innerHTML,\r\n        tabIndex: el =&gt; el.tabIndex,\r\n        lang: el =&gt; el.lang\r\n    });\r\n\r\n    await t\r\n        .expect(label.innerHTML).contains(&#39;type=&quot;checkbox&quot;&#39;)\r\n        .expect(label.tabIndex).eql(2)\r\n        .expect(label.lang).eql(&#39;en&#39;);\r\n});\r\n</code></pre><p>Obtain the property with a <a class=\"xref\" href=\"/documentation/402832/guides/basic-guides/client-functions\">client function</a>. Pass the selector to the <a class=\"xref\" href=\"/documentation/402789/reference/test-api/clientfunction/constructor#optionsdependencies\">dependencies</a> option:</p>\r\n<pre><code class=\"lang-js\">import { Selector, ClientFunction } from &#39;testcafe&#39;;\r\n\r\nfixture `My fixture`\r\n    .page `https://devexpress.github.io/testcafe/example/`;\r\n\r\ntest(&#39;Check Label HTML&#39;, async t =&gt; {\r\n    const label = Selector(&#39;label&#39;);\r\n\r\n    const getLabelHtml = ClientFunction(() =&gt; label().innerHTML, { dependencies: { label } });\r\n\r\n    await t\r\n        .expect(getLabelHtml()).contains(&#39;type=&quot;checkbox&quot;&#39;)\r\n        .expect(getLabelHtml()).contains(&#39;name=&quot;remote&quot;&#39;);\r\n});\r\n</code></pre><div class=\"NOTE\"><p class=\"alert-title\">Note</p><p>Client functions and selector property getters are asynchronous, and require the <code>await</code> keyword.</p>\r\n<p>However, the asynchronous <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions#smart-assertion-query-mechanism\">Smart Assertion Query Mechanism</a> lets you omit the <code>await</code> keyword when you pass a client function or a selector property to an <a class=\"xref\" href=\"/documentation/402837/guides/basic-guides/assertions\">assertion</a>.</p>\r\n</div>\r\n<h2 id=\"access-non-element-nodes__$\"><a class=\"anchor-fix\" href=\"#access-non-element-nodes\" id=\"access-non-element-nodes\"></a>Access non-element nodes<a class=\"anchor-hash\" href=\"#access-non-element-nodes\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>TestCafe includes three Selector methods that can return non-element nodes: <a class=\"xref\" href=\"/documentation/402753/reference/test-api/selector/filter\">filter(function)</a>, <a class=\"xref\" href=\"/documentation/402750/reference/test-api/selector/find\">find</a> and <a class=\"xref\" href=\"/documentation/402747/reference/test-api/selector/parent\">parent</a>. All other methods only return DOM elements.</p>\r\n<p>Consider the following <em>example.html</em> page:</p>\r\n<pre><code class=\"lang-html\">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n    &lt;body&gt;\r\n        This is my page. &lt;!--This is the first child node of &lt;body&gt;--&gt;\r\n        &lt;p&gt;My first paragraph.&lt;/p&gt;\r\n        &lt;p&gt;My second paragraph.&lt;/p&gt;\r\n    &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre><p>The first sentence on the page is not a DOM element. </p>\r\n<p>To select this node, we need to use the <a class=\"xref\" href=\"/documentation/402750/reference/test-api/selector/find\">find</a> method. In contrast, the <a class=\"xref\" href=\"/documentation/402757/reference/test-api/selector/child\">child</a> method skips the text node and returns the <code>&lt;p&gt;</code> element.</p>\r\n<pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\r\n\r\nfixture `My Fixture`\r\n    .page `example.html`;\r\n\r\nconst body              = Selector(&#39;body&#39;);\r\nconst firstChildElement = body.child(0);                 // &lt;p&gt;\r\nconst firstChildNode    = body.find((node, index) =&gt; {   // text node\r\n    return index === 0;\r\n});\r\n\r\ntest(&#39;My Test&#39;, async t =&gt; {\r\n    await t\r\n        .expect(firstChildElement.textContent).eql(&#39;My first paragraph.&#39;)\r\n        .expect(firstChildNode.textContent).eql(&#39;\\n        This is my page. &#39;);\r\n});\r\n</code></pre><h2 id=\"select-elements-that-contain-special-characters__$\"><a class=\"anchor-fix\" href=\"#select-elements-that-contain-special-characters\" id=\"select-elements-that-contain-special-characters\"></a>Select Elements That Contain Special Characters<a class=\"anchor-hash\" href=\"#select-elements-that-contain-special-characters\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"none\"><path d=\"M12.586 2.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2.002 2.002 0 01-3.438-1.407 2 2 0 01.61-1.42l3-3z\" clip-rule=\"evenodd\"></path></svg></a></h2>\r\n<p>Replace <a href=\"https://www.w3schools.com/html/html_symbols.asp\" target=\"_blank\">HTML symbols<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> and <a href=\"https://www.w3schools.com/html/html_entities.asp\" target=\"_blank\">entities<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> (for example, <code>&amp;nbsp;</code> or <code>\\n</code>) with their <a href=\"https://en.wikipedia.org/wiki/List_of_Unicode_characters#Latin-1_Supplement\" target=\"_blank\">unicode counterparts<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> when you use <a class=\"xref\" href=\"/documentation/402740/reference/test-api/selector/withtext\">Selector.WithText</a> or <a class=\"xref\" href=\"/documentation/402741/reference/test-api/selector/withexacttext\">Selector.WithExactText</a> to filter the page.</p>\r\n<p><strong>Example</strong></p>\r\n<pre><code class=\"lang-html\">&lt;html&gt;\r\n    &lt;body&gt;\r\n        &lt;p&gt;Click&amp;nbsp;me&lt;/p&gt;\r\n    &lt;/body&gt;\r\n&lt;/html&gt;\r\n</code></pre><pre><code class=\"lang-js\">import { Selector } from &#39;testcafe&#39;;\r\n\r\nfixture `My fixture`\r\n    .page `http://localhost/`;\r\n\r\ntest(&#39;My test&#39;, async t =&gt; {\r\n    const sel = await Selector(&#39;p&#39;).withText(&#39;Click&amp;nbsp;me&#39;) //typed representation, not supported\r\n    const sel = await Selector(&#39;p&#39;).withText(&#39;Click\\u00a0me&#39;) //unicode representation, works\r\n    const sel = await Selector(&#39;p&#39;).withText(&#39;Click\\xa0me&#39;) //hexadecimal representation, works\r\n    const sel = await Selector(&#39;p&#39;).withText(&#39;Click\\160me&#39;) //decimal representation introduced with an octal escape sequence;\r\n                                                            // not supported because tests are executed in strict mode\r\n});\r\n</code></pre><div class=\"IMPORTANT\"><p class=\"alert-title\">Important</p><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" target=\"_blank\">Strict mode JavaScript<span class=\"svg-no-wrap\">&#65279;<svg fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14\"></path></svg></span></a> prohibits the use of octal escape sequences in strings.</p>\r\n</div>\r\n","headers":[{"title":"Use Selectors in Actions","tagName":"h2","id":"use-selectors-in-actions","lvl":2},{"title":"Use Selectors in Assertions","tagName":"h2","id":"use-selectors-in-assertions","lvl":2},{"title":"Use Selectors to Check if an Element Exists","tagName":"h2","id":"use-selectors-to-check-if-an-element-exists","lvl":2},{"title":"Examine DOM Elements (DOM Node Snapshot)","tagName":"h2","id":"examine-dom-elements-dom-node-snapshot","lvl":2},{"title":"Access Custom Element Properties","tagName":"h2","id":"access-custom-element-properties","lvl":2},{"title":"Access non-element nodes","tagName":"h2","id":"access-non-element-nodes","lvl":2},{"title":"Select Elements That Contain Special Characters","tagName":"h2","id":"select-elements-that-contain-special-characters","lvl":2}],"title":"Selector Recipes","schema":null,"author":null,"preview":null,"description":null,"published":null},"topicUid":"403654","headerNav":{"items":[{"name":"TestCafe Studio","id":"TestCafe Studio"},{"name":"Guides","id":"402634","url":"/documentation/402634/guides","headerUrl":"/documentation/402635/guides/overview/getting-started","items":[]},{"name":"API","id":"402632","url":"/documentation/402632/api","items":[]},{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes","items":[]},{"name":"Examples","id":"402637","url":"/documentation/402637/examples"},{"name":"FAQ","id":"403936","url":"/documentation/403936/faq","headerUrl":"/documentation/402636/faq/general-info","items":[]},{"name":"What's New","id":"What's New","url":"/release-notes","href":"/release-notes","items":[]},{"name":"Dashboard Alpha","id":"Dashboard Alpha","items":[]},{"name":"Support","id":"Support","url":"/support","href":"/support"}],"activeItems":[{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes"},{"name":"Basics","id":"402633/Basics"},{"name":"Selector Recipes","id":"403654","url":"/documentation/403654/recipes/basics/selector-recipes"}]},"sidebarNav":{"root":{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes"},"items":[{"name":"Basics","id":"402633/Basics","items":[{"name":"Selector Recipes","id":"403654","url":"/documentation/403654/recipes/basics/selector-recipes"},{"name":"Test <select> Elements","id":"402806","url":"/documentation/402806/recipes/basics/test-select-elements"},{"name":"Test Static HTML Pages","id":"402805","url":"/documentation/402805/recipes/basics/test-static-html-pages"},{"name":"Test on Remote Computers and Mobile Devices","id":"402807","url":"/documentation/402807/recipes/basics/test-on-remote-computers-and-mobile-devices"},{"name":"Test File Upload","id":"402808","url":"/documentation/402808/recipes/basics/test-file-upload"}]},{"name":"Best Practices","id":"402633/Best Practices","items":[{"name":"Create Helpers","id":"402803","url":"/documentation/402803/recipes/best-practices/create-helpers"},{"name":"Create Data-Driven Tests","id":"402804","url":"/documentation/402804/recipes/best-practices/create-data-driven-tests"}]},{"name":"Integrations","id":"402633/Integrations","items":[{"name":"Import Third-Party Modules","id":"402795","url":"/documentation/402795/recipes/integrations/import-third-party-modules"},{"name":"Use Testing Library API","id":"402792","url":"/documentation/402792/recipes/integrations/use-testing-library-api"},{"name":"Use the Angular CLI Builder","id":"402793","url":"/documentation/402793/recipes/integrations/use-angular-cli-builder"},{"name":"Use TestCafe with Gulp","id":"402796","url":"/documentation/402796/recipes/integrations/gulp"},{"name":"Use TestCafe with Grunt","id":"402797","url":"/documentation/402797/recipes/integrations/grunt"},{"name":"Test Websites That Use reCAPTCHA","id":"402794","url":"/documentation/402794/recipes/integrations/test-websites-that-use-recaptcha"},{"name":"Find Code Issues with Flow Type Checker","id":"402798","url":"/documentation/402798/recipes/integrations/find-code-issues-with-flow-type-checker"}]},{"name":"Configuration","id":"402633/Configuration","items":[{"name":"Access Environment Variables in Tests","id":"402802","url":"/documentation/402802/recipes/configuration/access-environment-variables-in-tests"},{"name":"Grant or Fix TestCafe Permissions on macOS","id":"404111","url":"/documentation/404111/recipes/debugging/macos-permissions"}]},{"name":"Debugging","id":"402633/Debugging","items":[{"name":"Debug Tests in Chrome Developer Tools","id":"402801","url":"/documentation/402801/recipes/debugging/chrome-dev-tools"},{"name":"Debug Tests in Visual Studio Code","id":"402800","url":"/documentation/402800/recipes/debugging/visual-studio-code"},{"name":"Debug Tests in WebStorm","id":"402799","url":"/documentation/402799/recipes/debugging/webstorm"},{"name":"Skip JavaScript Errors","id":"404038","url":"/documentation/404038/recipes/debugging/skip-javascript-errors"}]},{"name":"Migration","id":"402633/Migration","items":[{"name":"TestCafe 2.0 Migration Guide","id":"404017","url":"/documentation/404017/recipes/migration/testcafe-2-0-migration-guide"},{"name":"Migrate Tests from Protractor to TestCafe","id":"403554","url":"/documentation/403554/recipes/migration/migrate-tests-from-protractor-to-testcafe"}]},{"name":"Legacy","id":"402633/Legacy","items":[{"name":"Download Files in IE","id":"404432","url":"/documentation/404432/recipes/legacy/download-files-in-ie"}]}],"activeItems":[{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes"},{"name":"Basics","id":"402633/Basics"},{"name":"Selector Recipes","id":"403654","url":"/documentation/403654/recipes/basics/selector-recipes"}],"showLeafs":true},"breadcrumbsNav":[{"name":"Recipes","id":"402633","url":"/documentation/402633/recipes"},{"name":"Basics","id":"402633/Basics"},{"name":"Selector Recipes","id":"403654","url":"/documentation/403654/recipes/basics/selector-recipes"}],"publishDates":{"teamBlog":[1687305600000,1667260800000,1661904000000,1657584000000,1637107200000,1633564800000,1632268800000,1626220800000,1612828800000,1609113600000,1607644800000,1605657600000,1605571200000,1600905600000,1599091200000,1598400000000,1597968000000,1597795200000,1595980800000,1594684800000,1593475200000,1590364800000,1587340800000],"releaseNotes}},"__N_SSG":true}